{"version":3,"sources":["webpack:///./src/images/pause.svg","webpack:///./src/sounds/crunch02.mp3","webpack:///./src/images/play.svg","webpack:///./src/sounds/burn.wav","webpack:///./src/images/skull.svg","webpack:///./src/js/skull.js","webpack:///./src/js/config.js","webpack:///./src/js/screens/title-screen.js","webpack:///./src/js/components/header.js","webpack:///./src/js/components/control-button.js","webpack:///./src/js/components/score-display.js","webpack:///./src/js/components/speed-slider.js","webpack:///./src/js/components/fire.js","webpack:///./src/js/components/life-gauge.js","webpack:///./src/js/game.js","webpack:///./src/js/index.js","webpack:///./src/images/spider-web.svg","webpack:///./src/sounds/fire-1.wav"],"names":["module","exports","__webpack_require__","p","getXPosition","size","canvasWidth","min","max","Math","ceil","floor","random","skullId","Skull","headerHeight","lastTickTime","maxValue","_classCallCheck","this","id","pointValue","xPos","yPos","offset","skullImg","Image","src","SkullIcon","sfx","crunch","Audio","burn","CrunchSfx","volume","BurnSfx","ctx","drawImage","fallSpeed","thisTickTime","isPaused","pausedTimestamp","clickPoint","pow","config","backgroundColor","font","scoreColor","textColor","TitleScreen","isSmallScreen","title_screen_classCallCheck","centerX","spiderWebImg","height","width","SpiderWebIcon","textAlign","concat","fillStyle","fillText","Header","header_classCallCheck","fillRect","moveTo","lineTo","stroke","ControlButton","control_button_classCallCheck","text","image","playImg","PlayIcon","pauseImg","PauseIcon","displayText","measureText","ScoreDisplay","score_display_classCallCheck","label","score","SpeedSlider","speed_slider_classCallCheck","dot","defaultXPos","line","xPosStart","xPosEnd","strokeStyle","isSliding","textHeight","beginPath","arc","PI","fill","newXPos","percent","FIRE_HEIGHT","Fire","canvasHeight","fire_classCallCheck","threshold","imageData","createImageData","data","fire","length","FireSfx","colors","i","color","bottomLine","x","value","y","index","putImageData","life_gauge_classCallCheck","life","getClickPoint","evt","targetTouches","preventDefault","touch","pageX","pageY","offsetX","offsetY","Game","game_classCallCheck","window","innerWidth","canvas","document","getElementById","innerHeight","getContext","components","controlButton","header","scoreDisplay","speedSlider","lifeGauge","LifeGauge","displayScores","screens","titleScreen","skulls","state","currentScreen","lastSkullCreateTime","pauseTimestamp","skullFallSpeed","addEventListeners","_this","wasClicked","barWasClicked","moveToPointOnBar","getSkullFallSpeed","Object","keys","values","forEach","skull","play","time","updateSlider","_this2","onkeydown","keyCode","addEventListener","gameClickEvents","gameMouseDownEvents","gameMouseMoveEvents","gameMouseUpEvents","newSkull","createSkull","lastSkull","_this3","move","gameOverTime","_this4","_this5","draw","gameOver","drawScores","reset","updateSkulls","addSkulls","clearRect","startGame","pause","load","dTime","_this6","requestAnimationFrame","run","update","render","game","firstGameTime","performance","now"],"mappings":"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","file":"main.bundle.js?e62c4b6d52e2c97a2fe9","sourcesContent":["module.exports = __webpack_public_path__ + \"98f48c4b98369fa1c1b63b653ed0ea3e.svg\";","module.exports = __webpack_public_path__ + \"b44ba96b76b33b01a3ded944585d95f7.mp3\";","module.exports = __webpack_public_path__ + \"de8d272e1d85031c228dd258ade37a58.svg\";","module.exports = __webpack_public_path__ + \"0502bf4e41d1e7dddcd6fdec8a95a39e.wav\";","module.exports = __webpack_public_path__ + \"bf106e6a962421f0651f8e77797753c2.svg\";","/**\n * Class representing a skull\n */\nimport SkullIcon from '../images/skull.svg';\nimport CrunchSfx from '../sounds/crunch02.mp3';\nimport BurnSfx from '../sounds/burn.wav';\n\nfunction getRandomInt(maxValue) {\n  return Math.ceil(Math.random() * Math.floor(maxValue));\n}\n\nfunction getRandomIntInRange(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getXPosition(size, canvasWidth) {\n  const edgeOffset = 14;\n  return getRandomIntInRange(\n    edgeOffset + size,\n    canvasWidth - size - edgeOffset\n  );\n}\n\nfunction getPointValue(size) {\n  const maxPoints = 10;\n  return maxPoints - size / 10 + 1;\n}\n\nlet skullId = 0;\n\nclass Skull {\n  constructor(canvasWidth, headerHeight, lastTickTime) {\n    this.id = skullId++;\n    this.size = getRandomInt(10) * 10;\n    this.pointValue = getPointValue(this.size);\n    this.xPos = getXPosition(this.size, canvasWidth);\n    this.yPos = headerHeight - this.size;\n    this.lastTickTime = lastTickTime;\n    this.offset = 0;\n    this.skullImg = new Image();\n    this.skullImg.src = SkullIcon;\n    this.sfx = {\n      crunch: new Audio(),\n      burn: new Audio()\n    };\n    this.sfx.crunch.src = CrunchSfx;\n    this.sfx.crunch.volume = 0.2;\n    this.sfx.burn.src = BurnSfx;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.skullImg, this.xPos, this.yPos, this.size, this.size);\n  }\n\n  move(fallSpeed, thisTickTime, isPaused, pausedTimestamp) {\n    // In order to restart after a pause, we need to keep track of this offset\n    this.offset = !isPaused ? this.offset : pausedTimestamp - thisTickTime;\n    if (!isPaused) {\n      // pixels to move = milliseconds since last move * speed per 1000 milliseconds\n      this.yPos +=\n        (thisTickTime - this.lastTickTime + this.offset) * (fallSpeed / 1000);\n      this.lastTickTime = thisTickTime;\n      // Need to reset after restarting after a pause.\n      this.offset = 0;\n    }\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      (clickPoint.xPos - (this.xPos + this.size / 2)) ** 2 +\n        (clickPoint.yPos - (this.yPos + this.size / 2)) ** 2 <\n      (this.size / 2) ** 2\n    );\n  }\n}\n\nexport default Skull;\n","/**\n * Shared settings for game\n */\n\nexport default {\n  backgroundColor: '#000000',\n  font: 'Source Code Pro',\n  scoreColor: '#00ff00',\n  textColor: '#cccccc'\n};\n","/**\n * Class representing title screen\n */\n\nimport config from '../config.js';\nimport SpiderWebIcon from '../../images/spider-web.svg';\n\nexport default class TitleScreen {\n  constructor(canvasWidth, isSmallScreen) {\n    this.centerX = canvasWidth / 2;\n    this.spiderWebImg = new Image();\n    this.spiderWebImg.height = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.width = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.src = SpiderWebIcon;\n  }\n\n  load(ctx, isSmallScreen) {\n    ctx.textAlign = 'center';\n\n    ctx.font = `${isSmallScreen ? '40px' : '80px'} Creepster`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SKULL CRUSHER', this.centerX, isSmallScreen ? 140 : 200);\n\n    ctx.font = `${isSmallScreen ? '28px' : '34px'} ${config.font}`;\n    ctx.fillText('Start', this.centerX, isSmallScreen ? 220 : 400);\n\n    ctx.font = `${isSmallScreen ? '20px' : '26px'} ${config.font}`;\n    ctx.fillText(\n      'TAP or PRESS ENTER',\n      this.centerX,\n      `${isSmallScreen ? 260 : 440}`\n    );\n\n    ctx.drawImage(\n      this.spiderWebImg,\n      isSmallScreen ? -50 : -80,\n      isSmallScreen ? -42 : -72,\n      isSmallScreen ? 120 : 200,\n      isSmallScreen ? 120 : 200\n    );\n  }\n}\n","/**\n * Class for header component\n */\n\nimport config from '../config.js';\n\nexport default class Header {\n  constructor(canvasWidth, height) {\n    this.xPos = 0;\n    this.yPos = 0;\n    this.width = canvasWidth;\n    this.height = height;\n  }\n\n  draw(ctx, canvasWidth) {\n    ctx.fillStyle = config.backgroundColor;\n    ctx.fillRect(this.xPos, this.yPos, this.width, this.height);\n\n    ctx.fillStyle = config.textColor;\n    ctx.moveTo(this.xPos, this.height);\n    ctx.lineTo(this.width, this.height);\n    ctx.stroke();\n  }\n}\n","/**\n * Class for pause/resume game control component\n */\n\nimport config from '../config.js';\nimport PlayIcon from '../../images/play.svg';\nimport PauseIcon from '../../images/pause.svg';\n\nexport default class ControlButton {\n  constructor(canvasWidth) {\n    this.text = {\n      width: 0,\n      xPos: canvasWidth - 115,\n      yPos: 30\n    };\n    this.image = {\n      xPos: canvasWidth - 105,\n      yPos: 14,\n      size: 18\n    };\n    this.playImg = new Image();\n    this.playImg.height = this.image.size;\n    this.playImg.width = this.image.size;\n    this.playImg.src = PlayIcon;\n    this.pauseImg = new Image();\n    this.pauseImg.height = this.image.size;\n    this.pauseImg.width = this.image.size;\n    this.pauseImg.src = PauseIcon;\n  }\n\n  draw(ctx, isPaused) {\n    const displayText = isPaused ? 'RESUME' : 'PAUSE';\n    this.text.width = ctx.measureText(displayText).width;\n    ctx.textAlign = 'end';\n    ctx.font = `20px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText(displayText, this.text.xPos, this.text.yPos);\n    ctx.drawImage(\n      isPaused ? this.playImg : this.pauseImg,\n      this.image.xPos,\n      this.image.yPos,\n      this.image.size,\n      this.image.size\n    );\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      clickPoint.xPos >= this.text.xPos - this.text.width &&\n      clickPoint.xPos <= this.image.xPos + this.image.size &&\n      clickPoint.yPos >= this.image.yPos &&\n      clickPoint.yPos <= this.image.yPos + this.image.size\n    );\n  }\n}\n","/**\n * Class for score display component\n */\n\nimport config from '../config.js';\n\nexport default class ScoreDisplay {\n  constructor() {\n    this.label = {\n      xPos: 20,\n      yPos: 30\n    };\n    this.score = {\n      xPos: 90,\n      yPos: 30\n    };\n  }\n  draw(ctx, score) {\n    ctx.textAlign = 'start';\n    // Score label\n    ctx.font = `20px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SCORE', this.label.xPos, this.label.yPos);\n    // Score\n    ctx.fillStyle = config.scoreColor;\n    ctx.fillText(score, this.score.xPos, this.score.yPos);\n  }\n}\n","/**\n * Class for speed slider component\n */\n\nimport config from '../config.js';\n\nexport default class SpeedSlider {\n  constructor(canvasWidth) {\n    this.label = {\n      xPos: canvasWidth - 175,\n      yPos: 50,\n      height: 14\n    };\n    this.dot = {\n      defaultXPos: canvasWidth - 120,\n      xPos: canvasWidth - 120,\n      yPos: 45,\n      size: 5\n    };\n    this.line = {\n      xPosStart: canvasWidth - 120,\n      xPosEnd: canvasWidth - 20,\n      yPos: 45\n    };\n    this.fillStyle = config.textColor;\n    this.strokeStyle = config.textColor;\n    this.isSliding = false;\n    this.textHeight = 0;\n  }\n\n  draw(ctx) {\n    ctx.textAlign = 'start';\n    // Speed slider label\n    ctx.font = `${this.label.height}px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SPEED', this.label.xPos, this.label.yPos);\n    ctx.beginPath();\n    // Speed slider dot\n    ctx.arc(this.dot.xPos, this.dot.yPos, this.dot.size, 0, Math.PI * 2, false);\n    ctx.strokeStyle = this.strokeStyle;\n    ctx.fillStyle = this.fillStyle;\n    ctx.fill();\n    // Speed slider line\n    ctx.moveTo(this.line.xPosStart, this.line.yPos);\n    ctx.lineTo(this.line.xPosEnd, this.line.yPos);\n    ctx.stroke();\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      (clickPoint.xPos - this.dot.xPos) ** 2 +\n        (clickPoint.yPos - this.dot.yPos) ** 2 <\n      (this.dot.size * 2) ** 2\n    );\n  }\n\n  reset() {\n    this.dot.xPos = this.dot.defaultXPos;\n  }\n\n  updateSlider(newXPos) {\n    if (\n      this.isSliding &&\n      newXPos >= this.line.xPosStart &&\n      newXPos <= this.line.xPosEnd\n    ) {\n      this.dot.xPos = newXPos;\n    }\n  }\n\n  moveToPointOnBar(newXPos) {\n    this.dot.xPos = newXPos;\n  }\n\n  barWasClicked(clickPoint) {\n    return (\n      clickPoint.yPos >= this.label.yPos - this.label.height / 2 &&\n      clickPoint.yPos <= this.label.yPos + this.label.height / 2 &&\n      clickPoint.xPos >= this.line.xPosStart &&\n      clickPoint.xPos <= this.line.xPosEnd\n    );\n  }\n\n  getSkullFallSpeed() {\n    const percent = Math.floor(\n      ((this.dot.xPos - this.line.xPosStart) /\n        (this.line.xPosEnd - this.line.xPosStart)) *\n        100\n    );\n    const range = this.line.xPosEnd - this.line.xPosStart;\n    const value = Math.floor((percent / 100) * 90) + 10;\n    return value;\n  }\n}\n","/**\n * Class for fire at the bottom of game screen\n * @description Fire effect borrowed from: https://www.ssaurel.com/fireeffect/fireeffect.htm\n */\n\nimport FireSfx from '../../sounds/fire-1.wav';\nconst FIRE_HEIGHT = 60;\n\nexport default class Fire {\n  constructor(ctx, canvasWidth, canvasHeight) {\n    this.threshold = 0.5;\n    this.imageData = ctx.createImageData(canvasWidth, FIRE_HEIGHT);\n    this.data = this.imageData.data;\n    this.fire = [];\n    this.fire.length = canvasWidth * FIRE_HEIGHT;\n    this.fire.fill(0);\n    this.sfx = new Audio();\n    this.sfx.src = FireSfx;\n    this.colors = [];\n    this.colors.length = 256;\n    for (let i = 0; i < 256; i++) {\n      let color = [];\n      color[0] = color[1] = color[2] = color[3] = 0;\n      this.colors[i] = color;\n    }\n\n    for (let i = 0; i < 32; ++i) {\n      this.colors[i][2] = i << 1;\n      this.colors[i + 32][0] = i << 3;\n      this.colors[i + 32][2] = 64 - (i << 1);\n      this.colors[i + 64][0] = 255;\n      this.colors[i + 64][1] = i << 3;\n      this.colors[i + 96][0] = 255;\n      this.colors[i + 96][1] = 255;\n      this.colors[i + 96][2] = i << 2;\n      this.colors[i + 128][0] = 255;\n      this.colors[i + 128][1] = 255;\n      this.colors[i + 128][2] = 64 + (i << 2);\n      this.colors[i + 160][0] = 255;\n      this.colors[i + 160][1] = 255;\n      this.colors[i + 160][2] = 128 + (i << 2);\n      this.colors[i + 192][0] = 255;\n      this.colors[i + 192][1] = 255;\n      this.colors[i + 192][2] = 192 + i;\n      this.colors[i + 224][0] = 255;\n      this.colors[i + 224][1] = 255;\n      this.colors[i + 224][2] = 224 + i;\n    }\n  }\n\n  draw(ctx, canvasWidth, canvasHeight, isPaused) {\n    if (!isPaused) {\n      let bottomLine = canvasWidth * (FIRE_HEIGHT - 1);\n      // draw random pixels at the bottom line\n      for (let x = 0; x < canvasWidth; x++) {\n        let value = 0;\n\n        if (Math.random() > this.threshold) value = 255;\n\n        this.fire[bottomLine + x] = value;\n      }\n\n      // move flip upwards, start at bottom\n      let value = 0;\n\n      for (let y = 0; y < FIRE_HEIGHT; ++y) {\n        for (let x = 0; x < canvasWidth; ++x) {\n          if (x === 0) {\n            value = this.fire[bottomLine];\n            value += this.fire[bottomLine];\n            value += this.fire[bottomLine - canvasWidth];\n            value /= 3;\n          } else if (x === canvasWidth - 1) {\n            value = this.fire[bottomLine + x];\n            value += this.fire[bottomLine - canvasWidth + x];\n            value += this.fire[bottomLine + x - 1];\n            value /= 3;\n          } else {\n            value = this.fire[bottomLine + x];\n            value += this.fire[bottomLine + x + 1];\n            value += this.fire[bottomLine + x - 1];\n            value += this.fire[bottomLine - canvasWidth + x];\n            value /= 4;\n          }\n\n          if (value > 1) value -= 1;\n\n          value = Math.floor(value);\n          let index = bottomLine - canvasWidth + x;\n          this.fire[index] = value;\n        }\n\n        bottomLine -= canvasWidth;\n      }\n    }\n\n    let skipRows = 2; // skip the bottom 2 rows\n    // render the flames using our color table\n    for (let y = skipRows; y < FIRE_HEIGHT; ++y) {\n      for (let x = 0; x < canvasWidth; ++x) {\n        let index = y * canvasWidth * 4 + x * 4;\n        let value = this.fire[(y - skipRows) * canvasWidth + x];\n        this.data[index] = this.colors[value][0];\n        this.data[++index] = this.colors[value][1];\n        this.data[++index] = this.colors[value][2];\n        this.data[++index] = 255;\n      }\n    }\n    ctx.putImageData(this.imageData, 0, canvasHeight - FIRE_HEIGHT);\n  }\n}\n","/**\n * Class for life gauge component\n */\n\nimport config from '../config.js';\n\nexport default class SpeedSlider {\n  constructor(ctx) {\n    this.label = {\n      xPos: 20,\n      yPos: 50,\n      height: 14,\n      width: ctx.measureText('LIFE').width + 10\n    };\n  }\n\n  draw(ctx, life) {\n    ctx.textAlign = 'start';\n    ctx.font = `${this.label.height}px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('LIFE', this.label.xPos, this.label.yPos);\n    for (let i = 0; i < 10; i++) {\n      ctx.fillStyle = i < life ? '#ffffff' : '#bb0a1e';\n      ctx.fillRect(\n        this.label.xPos + this.label.width + 10 + i * 10,\n        this.label.yPos - 11,\n        6,\n        this.label.height - 2\n      );\n    }\n  }\n}\n","/**\n * Class representing the game\n */\n\nimport Skull from './skull.js';\nimport TitleScreen from './screens/title-screen.js';\nimport Header from './components/header.js';\nimport ControlButton from './components/control-button.js';\nimport ScoreDisplay from './components/score-display.js';\nimport SpeedSlider from './components/speed-slider.js';\nimport Fire from './components/fire.js';\nimport LifeGauge from './components/life-gauge.js';\nimport config from './config.js';\n\nfunction getClickPoint(evt) {\n  let clickPoint = {};\n  if (evt.targetTouches && evt.targetTouches.length === 1) {\n    // Touch event is fired before click event.\n    // Cancel click event in case of mobile.\n    evt.preventDefault();\n    const touch = evt.targetTouches[0];\n    clickPoint = {\n      xPos: touch.pageX,\n      yPos: touch.pageY\n    };\n  } else {\n    clickPoint = {\n      xPos: evt.offsetX,\n      yPos: evt.offsetY\n    };\n  }\n  return clickPoint;\n}\n\nexport default class Game {\n  constructor() {\n    // configuration settings\n    this.config = {\n      isSmallScreen: window.innerWidth < 800,\n      headerHeight: 60\n    };\n\n    // canvas element\n    this.canvas = document.getElementById('game');\n    this.canvas.width = this.config.isSmallScreen ? window.innerWidth : 800;\n    this.canvas.height = window.innerHeight;\n    // canvas context\n    this.ctx = this.canvas.getContext('2d');\n\n    // display components\n    this.components = {\n      controlButton: new ControlButton(this.canvas.width),\n      header: new Header(this.canvas.width, this.config.headerHeight),\n      fire: new Fire(this.ctx, this.canvas.width, this.canvas.height),\n      scoreDisplay: new ScoreDisplay(),\n      speedSlider: new SpeedSlider(this.canvas.width),\n      lifeGauge: new LifeGauge(this.ctx)\n    };\n\n    // skull score to display after destroying\n    this.displayScores = {};\n\n    // game screens\n    this.screens = {\n      titleScreen: new TitleScreen(this.canvas.width, this.config.isSmallScreen)\n    };\n\n    // the skulls\n    this.skulls = {};\n\n    // game state\n    this.state = {\n      clickPoint: {},\n      currentScreen: 'title',\n      isPaused: false,\n      lastSkullCreateTime: 0,\n      lastTickTime: 0,\n      life: 10,\n      pauseTimestamp: 0,\n      score: 0,\n      skullFallSpeed: 10\n    };\n\n    // initialize event listeners\n    this.addEventListeners();\n  }\n\n  // Events\n  gameClickEvents(clickPoint) {\n    if (this.state.currentScreen === 'game') {\n      // Click event for the pause/resume button\n      if (\n        this.state.life > 0 &&\n        this.components.controlButton.wasClicked(clickPoint)\n      ) {\n        this.state.isPaused = !this.state.isPaused;\n        this.state.pauseTimestamp = this.state.isPaused\n          ? this.state.lastTickTime\n          : 0;\n      }\n      // Click event for the speed adjustment slider\n      if (this.components.speedSlider.barWasClicked(clickPoint)) {\n        this.components.speedSlider.moveToPointOnBar(clickPoint.xPos);\n        this.state.skullFallSpeed = this.components.speedSlider.getSkullFallSpeed();\n      }\n\n      // Click event for skulls\n      // Don't run check if game is over.\n      // Don't run check if paused.\n      // Don't need to run check if there's no skulls.\n      // Don't allow skulls to pop when clicked in the header.\n      if (\n        this.state.life > 0 &&\n        !this.state.isPaused &&\n        Object.keys(this.skulls).length > 0 &&\n        clickPoint.yPos > this.config.headerHeight\n      ) {\n        Object.values(this.skulls).forEach(skull => {\n          if (skull.wasClicked(clickPoint)) {\n            this.state.score += skull.pointValue;\n            skull.sfx.crunch.play();\n            this.displayScores[skull.id] = {\n              id: skull.id,\n              pointValue: skull.pointValue,\n              xPos: skull.xPos + skull.size / 2,\n              yPos: skull.yPos + skull.size / 2,\n              time: this.state.lastTickTime\n            };\n            delete this.skulls[skull.id];\n          }\n        });\n      }\n    }\n  }\n\n  gameMouseDownEvents(clickPoint) {\n    if (this.state.currentScreen === 'game') {\n      if (this.components.speedSlider.wasClicked(clickPoint)) {\n        this.components.speedSlider.isSliding = true;\n      }\n    }\n  }\n\n  gameMouseMoveEvents(evt) {\n    if (this.state.currentScreen === 'game') {\n      if (this.components.speedSlider.isSliding) {\n        this.state.clickPoint = getClickPoint(evt);\n        this.components.speedSlider.updateSlider(this.state.clickPoint.xPos);\n        this.state.skullFallSpeed = this.components.speedSlider.getSkullFallSpeed();\n      }\n    }\n  }\n\n  gameMouseUpEvents(evt) {\n    if (this.state.currentScreen === 'game') {\n      if (this.components.speedSlider.isSliding) {\n        this.components.speedSlider.isSliding = false;\n      }\n    }\n  }\n\n  addEventListeners() {\n    if (this.state.currentScreen === 'title') {\n      document.onkeydown = evt => {\n        if (evt.keyCode === 13) {\n          // Reset the fire sfx\n          this.components.fire.sfx.volume = 1;\n          this.state.currentScreen = 'game';\n        }\n      };\n      this.canvas.addEventListener('touchstart', evt => {\n        this.state.currentScreen = 'game';\n      });\n    }\n    this.canvas.addEventListener('click', evt => {\n      this.gameClickEvents(this.state.clickPoint);\n    });\n    this.canvas.addEventListener('mousedown', evt => {\n      this.state.clickPoint = getClickPoint(evt);\n      this.gameMouseDownEvents(this.state.clickPoint);\n    });\n    this.canvas.addEventListener('touchstart', evt => {\n      this.state.clickPoint = getClickPoint(evt);\n      this.gameClickEvents(this.state.clickPoint);\n      this.gameMouseDownEvents(this.state.clickPoint);\n    });\n    this.canvas.addEventListener('mousemove', evt => {\n      this.gameMouseMoveEvents(evt);\n    });\n    this.canvas.addEventListener('touchmove', evt => {\n      this.gameMouseMoveEvents(evt);\n    });\n    this.canvas.addEventListener('mouseup', evt => {\n      this.gameMouseUpEvents(evt);\n    });\n    this.canvas.addEventListener('touchend', evt => {\n      this.gameMouseUpEvents(evt);\n    });\n  }\n\n  createSkull() {\n    return new Skull(\n      this.canvas.width,\n      this.config.headerHeight,\n      this.state.lastTickTime\n    );\n  }\n\n  addSkulls() {\n    if (\n      this.state.currentScreen === 'game' &&\n      this.state.life > 0 &&\n      !this.state.isPaused\n    ) {\n      if (this.state.lastTickTime - this.state.lastSkullCreateTime >= 1000) {\n        const skulls = Object.values(this.skulls);\n        if (skulls.length === 0) {\n          const newSkull = this.createSkull();\n          this.skulls[newSkull.id] = newSkull;\n        }\n        const lastSkull = skulls[skulls.length - 1];\n        // Don't add skulls on top of each other.\n        if (lastSkull && lastSkull.yPos >= lastSkull.size) {\n          const newSkull = this.createSkull();\n          this.skulls[newSkull.id] = newSkull;\n        }\n        this.state.lastSkullCreateTime = this.state.lastTickTime;\n      }\n    }\n  }\n\n  updateSkulls() {\n    Object.values(this.skulls).forEach(skull => {\n      if (this.state.currentScreen === 'game') {\n        skull.move(\n          this.state.skullFallSpeed,\n          this.state.lastTickTime,\n          this.state.isPaused,\n          this.state.pauseTimestamp\n        );\n        // Remove if out of bounds\n        if (skull.yPos >= this.canvas.height + skull.size) {\n          skull.sfx.burn.play();\n          delete this.skulls[skull.id];\n          this.state.life -= 1;\n          if (!this.state.life) {\n            this.state.gameOverTime = this.state.lastTickTime;\n          }\n        }\n      }\n    });\n  }\n\n  drawScores() {\n    Object.values(this.displayScores).forEach(score => {\n      if (this.state.lastTickTime - score.time <= 500) {\n        this.ctx.textAlign = 'start';\n        this.ctx.font = `20px ${config.font}`;\n        this.ctx.fillStyle = config.scoreColor;\n        this.ctx.fillText(`+${score.pointValue}`, score.xPos, score.yPos);\n      } else {\n        delete this.displayScores[score.id];\n      }\n    });\n  }\n\n  startGame() {\n    // Draw components and skulls\n    this.components.fire.draw(\n      this.ctx,\n      this.canvas.width,\n      this.canvas.height,\n      this.state.isPaused\n    );\n    Object.values(this.skulls).forEach(skull => {\n      skull.draw(this.ctx);\n    });\n    if (this.state.life === 0) {\n      this.gameOver();\n    }\n    this.drawScores();\n    this.components.header.draw(this.ctx, this.canvas.width);\n    this.components.scoreDisplay.draw(this.ctx, this.state.score);\n    this.components.speedSlider.draw(this.ctx);\n    this.components.controlButton.draw(this.ctx, this.state.isPaused);\n    this.components.lifeGauge.draw(this.ctx, this.state.life);\n  }\n\n  gameOver() {\n    this.ctx.textAlign = 'center';\n    this.ctx.font = `${this.config.isSmallScreen ? '40px' : '80px'} Creepster`;\n    this.ctx.fillStyle = '#bb0a1e';\n    this.ctx.fillText(\n      'GAME OVER',\n      this.canvas.width / 2,\n      this.config.isSmallScreen ? 200 : 300\n    );\n    if (this.state.lastTickTime - this.state.gameOverTime >= 5000) {\n      // Reset game state\n      this.state.skullFallSpeed = 10;\n      this.skulls = {};\n      this.state.life = 10;\n      this.state.score = 0;\n      this.state.isPaused = false;\n      // Reset the speed slider\n      this.components.speedSlider.reset();\n      // Mute the fire sfx\n      this.components.fire.sfx.volume = 0;\n      // Go back to title screen\n      this.state.currentScreen = 'title';\n    }\n  }\n\n  update() {\n    if (this.state.life > 0) {\n      this.updateSkulls();\n      this.addSkulls();\n    }\n  }\n\n  render() {\n    // Clear the canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    switch (this.state.currentScreen) {\n      case 'game': {\n        this.startGame();\n        if (this.state.isPaused) {\n          this.components.fire.sfx.pause();\n        } else {\n          this.components.fire.sfx.play();\n        }\n        break;\n      }\n      default: {\n        this.screens.titleScreen.load(this.ctx, this.config.isSmallScreen);\n      }\n    }\n  }\n\n  run(dTime) {\n    this.state.lastTickTime = dTime;\n    window.requestAnimationFrame(dTime => this.run(dTime));\n    this.update();\n    this.render();\n  }\n}\n","import Game from './game.js';\nimport '../style.scss';\n\nconst game = new Game();\n\n// Kick off main game loop\nconst firstGameTime = window.performance.now();\ngame.state.lastSkullCreateTime = firstGameTime;\ngame.run(firstGameTime);\n","module.exports = __webpack_public_path__ + \"27662ad207610e3ed76bce537618eabd.svg\";","module.exports = __webpack_public_path__ + \"27126068ad3068d268ece96cf35fada4.wav\";"],"sourceRoot":""}