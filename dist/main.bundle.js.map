{"version":3,"sources":["webpack:///./src/images/pause.svg","webpack:///./src/sounds/crunch02.mp3","webpack:///./src/images/play.svg","webpack:///./src/sounds/burn.wav","webpack:///./src/images/skull.svg","webpack:///./src/js/skull.js","webpack:///./src/js/config.js","webpack:///./src/js/screens/title-screen.js","webpack:///./src/js/components/fire.js","webpack:///./src/js/game.js","webpack:///./src/js/index.js","webpack:///./src/images/spider-web.svg","webpack:///./src/sounds/fire-1.wav"],"names":["module","exports","__webpack_require__","p","getXPosition","size","canvasWidth","min","max","Math","ceil","floor","random","skullId","Skull","headerHeight","lastTickTime","maxValue","_classCallCheck","this","id","pointValue","xPos","yPos","offset","skullImg","Image","src","SkullIcon","sfx","crunch","Audio","burn","CrunchSfx","volume","BurnSfx","ctx","drawImage","fallSpeed","thisTickTime","isPaused","pausedTimestamp","clickPoint","pow","config","TitleScreen","canvasHeight","isSmallScreen","title_screen_classCallCheck","centerX","spiderWebImg","height","width","SpiderWebIcon","title","subtitle","textAlign","font","concat","fillStyle","fillText","Fire","_this","fire_classCallCheck","fireHeight","imageData","createImageData","data","fire","length","fill","FireSfx","addEventListener","play","colors","i","lookupTable","push","lookupIndex","bottomLine","y","x","lookup","value","index","putImageData","toggleCanvasOverlay","document","getElementById","classList","toggle","toggleHeader","updateScore","scoreEl","dataset","score","Number","updateLife","lifePoints","style","getClickPoint","evt","targetTouches","preventDefault","touch","pageX","pageY","offsetX","offsetY","Game","game_classCallCheck","window","innerWidth","canvas","innerHeight","getContext","fireCanvas","fireCtx","components","displayScores","screens","titleScreen","skulls","state","currentScreen","isGameTabHidden","lastSkullCreateTime","life","pauseTimestamp","skullFallSpeed","addEventListeners","Object","keys","values","forEach","skull","wasClicked","time","updateSpeed","_this2","hidden","pause","_this3","speedSliderBarEl","_this4","gameControlsEl","_this5","visibilityChangeEvent","speedSliderEvent","playControlEvent","titleScreenClickEvents","gameClickEvents","newSkull","createSkull","lastSkull","_this6","move","gameOverTime","newSpeed","_this7","_this8","played","draw","gameOver","drawScores","fontHeight","resetGameState","clearRect","updateSkulls","addSkulls","update","runGame","load","dTime","_this9","requestAnimationFrame","run","render","cb","imagesToPreload","images","game","firstGameTime","performance","now","playImg","pauseImg","image"],"mappings":"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","file":"main.bundle.js?1ac2e200b7621fea1169","sourcesContent":["module.exports = __webpack_public_path__ + \"98f48c4b98369fa1c1b63b653ed0ea3e.svg\";","module.exports = __webpack_public_path__ + \"b44ba96b76b33b01a3ded944585d95f7.mp3\";","module.exports = __webpack_public_path__ + \"de8d272e1d85031c228dd258ade37a58.svg\";","module.exports = __webpack_public_path__ + \"0502bf4e41d1e7dddcd6fdec8a95a39e.wav\";","module.exports = __webpack_public_path__ + \"bf106e6a962421f0651f8e77797753c2.svg\";","/**\n * Class representing a skull\n */\nimport SkullIcon from '../images/skull.svg';\nimport CrunchSfx from '../sounds/crunch02.mp3';\nimport BurnSfx from '../sounds/burn.wav';\n\nfunction getRandomInt(maxValue) {\n  return Math.ceil(Math.random() * Math.floor(maxValue));\n}\n\nfunction getRandomIntInRange(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getXPosition(size, canvasWidth) {\n  const edgeOffset = 14;\n  return getRandomIntInRange(\n    edgeOffset + size,\n    canvasWidth - size - edgeOffset\n  );\n}\n\nfunction getPointValue(size) {\n  const maxPoints = 10;\n  return maxPoints - size / 10 + 1;\n}\n\nlet skullId = 0;\n\nclass Skull {\n  constructor(canvasWidth, headerHeight, lastTickTime) {\n    this.id = skullId++;\n    this.size = getRandomInt(10) * 10;\n    this.pointValue = getPointValue(this.size);\n    this.xPos = getXPosition(this.size, canvasWidth);\n    this.yPos = headerHeight - this.size;\n    this.lastTickTime = lastTickTime;\n    this.offset = 0;\n    this.skullImg = new Image();\n    this.skullImg.src = SkullIcon;\n    this.sfx = {\n      crunch: new Audio(),\n      burn: new Audio()\n    };\n    this.sfx.crunch.src = CrunchSfx;\n    this.sfx.crunch.volume = 0.2;\n    this.sfx.burn.src = BurnSfx;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.skullImg, this.xPos, this.yPos, this.size, this.size);\n  }\n\n  move(fallSpeed, thisTickTime, isPaused, pausedTimestamp) {\n    // In order to restart after a pause, we need to keep track of this offset\n    this.offset = !isPaused ? this.offset : pausedTimestamp - thisTickTime;\n    if (!isPaused) {\n      // pixels to move = milliseconds since last move * speed per 1000 milliseconds\n      this.yPos +=\n        (thisTickTime - this.lastTickTime + this.offset) * (fallSpeed / 1000);\n      this.lastTickTime = thisTickTime;\n      // Need to reset after restarting after a pause.\n      this.offset = 0;\n    }\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      (clickPoint.xPos - (this.xPos + this.size / 2)) ** 2 +\n        (clickPoint.yPos - (this.yPos + this.size / 2)) ** 2 <\n      (this.size / 2) ** 2\n    );\n  }\n}\n\nexport default Skull;\n","/**\n * Shared settings for game\n */\n\nexport default {\n  backgroundColor: '#000000',\n  font: 'Source Code Pro',\n  titleFont: 'Creepster',\n  scoreColor: '#00ff00',\n  textColor: '#cccccc'\n};\n","/**\n * Class representing title screen\n */\n\nimport config from '../config.js';\nimport SpiderWebIcon from '../../images/spider-web.svg';\n\nexport default class TitleScreen {\n  constructor(canvasWidth, canvasHeight, isSmallScreen) {\n    this.centerX = canvasWidth / 2;\n    this.spiderWebImg = new Image();\n    this.spiderWebImg.height = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.width = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.src = SpiderWebIcon;\n    this.title = {\n      size: isSmallScreen ? 50 : 80\n    };\n    this.title.yPos = canvasHeight / 2 - this.title.size;\n\n    this.subtitle = {\n      size: isSmallScreen ? 28 : 34\n    };\n    this.subtitle.yPos = canvasHeight / 2 + this.subtitle.size;\n  }\n\n  load(ctx, isSmallScreen) {\n    ctx.textAlign = 'center';\n\n    ctx.font = `${this.title.size}px ${config.titleFont}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SKULL CRUSHER', this.centerX, this.title.yPos);\n\n    ctx.font = `${this.subtitle.size}px  ${config.font}`;\n    ctx.fillText('Start', this.centerX, this.subtitle.yPos);\n\n    ctx.drawImage(\n      this.spiderWebImg,\n      isSmallScreen ? -50 : -80,\n      isSmallScreen ? -42 : -72,\n      isSmallScreen ? 120 : 200,\n      isSmallScreen ? 120 : 200\n    );\n  }\n}\n","/**\n * Class for fire at the bottom of game screen\n * @description Fire effect adapted from: https://www.ssaurel.com/fireeffect/fireeffect.htm\n */\n\nimport FireSfx from '../../sounds/fire-1.wav';\n\nexport default class Fire {\n  constructor(ctx, canvasWidth, canvasHeight) {\n    this.fireHeight = 60;\n    this.imageData = ctx.createImageData(canvasWidth, this.fireHeight);\n    this.data = this.imageData.data;\n    this.fire = [];\n    this.fire.length = canvasWidth * this.fireHeight;\n    this.fire.fill(0);\n    this.sfx = new Audio();\n    this.sfx.src = FireSfx;\n    this.sfx.addEventListener('ended', () => {\n      this.sfx.play();\n    });\n    this.colors = [];\n    this.colors.length = 256;\n    for (let i = 0; i < 256; i++) {\n      let color = [0, 0, 0];\n      this.colors[i] = color;\n    }\n\n    for (let i = 0; i < 32; ++i) {\n      this.colors[i][2] = i << 1;\n      this.colors[i + 32][0] = i << 3;\n      this.colors[i + 32][2] = 64 - (i << 1);\n      this.colors[i + 64][0] = 255;\n      this.colors[i + 64][1] = i << 3;\n      this.colors[i + 96][0] = 255;\n      this.colors[i + 96][1] = 255;\n      this.colors[i + 96][2] = i << 2;\n      this.colors[i + 128][0] = 255;\n      this.colors[i + 128][1] = 255;\n      this.colors[i + 128][2] = 64 + (i << 2);\n      this.colors[i + 160][0] = 255;\n      this.colors[i + 160][1] = 255;\n      this.colors[i + 160][2] = 128 + (i << 2);\n      this.colors[i + 192][0] = 255;\n      this.colors[i + 192][1] = 255;\n      this.colors[i + 192][2] = 192 + i;\n      this.colors[i + 224][0] = 255;\n      this.colors[i + 224][1] = 255;\n      this.colors[i + 224][2] = 224 + i;\n    }\n\n    this.lookupTable = [];\n    for (let i = 1e6; i--; ) {\n      this.lookupTable.push(Math.random());\n    }\n    this.lookupIndex = 0;\n\n    this.bottomLine = canvasWidth * (this.fireHeight - 1);\n  }\n\n  lookup() {\n    return ++this.lookupIndex >= this.lookupTable.length\n      ? this.lookupTable[(this.lookupIndex = 0)]\n      : this.lookupTable[this.lookupIndex];\n  }\n\n  update(canvasWidth) {\n    let bottomLine = this.bottomLine;\n\n    // move flip upwards, start at bottom\n    for (let y = 0; y < this.fireHeight; ++y) {\n      for (let x = 0; x < canvasWidth; ++x) {\n        if (y === 0) {\n          // draw random pixels at the bottom line\n          this.fire[bottomLine + x] = this.lookup() > 0.5 ? 255 : 0;\n        }\n        let value = 0;\n        // Update the fire array\n        if (x === 0) {\n          value =\n            (this.fire[bottomLine] +\n              this.fire[bottomLine] +\n              this.fire[bottomLine - canvasWidth]) /\n            3;\n        } else if (x === canvasWidth - 1) {\n          value =\n            (this.fire[bottomLine + x] +\n              this.fire[bottomLine - canvasWidth + x] +\n              this.fire[bottomLine + x - 1]) /\n            3;\n        } else {\n          value =\n            (this.fire[bottomLine + x] +\n              this.fire[bottomLine + x + 1] +\n              this.fire[bottomLine + x - 1] +\n              this.fire[bottomLine - canvasWidth + x]) /\n            4;\n        }\n        this.fire[bottomLine - canvasWidth + x] = ~~(value > 1\n          ? value - 1\n          : value);\n      }\n\n      bottomLine -= canvasWidth;\n    }\n  }\n\n  draw(ctx, canvasWidth, canvasHeight) {\n    for (let y = 0; y < this.fireHeight; ++y) {\n      for (let x = 0; x < canvasWidth; ++x) {\n        // Update the display data\n        let skipRows = 2;\n        if (y >= skipRows) {\n          let index = y * canvasWidth * 4 + x * 4;\n          let value = this.fire[(y - skipRows) * canvasWidth + x];\n          this.data[index] = this.colors[value][0];\n          this.data[++index] = this.colors[value][1];\n          this.data[++index] = this.colors[value][2];\n          this.data[++index] =\n            !this.colors[value][0] &&\n            !this.colors[value][1] &&\n            this.colors[value][2] <= 255\n              ? 0\n              : 200;\n        }\n      }\n    }\n\n    ctx.putImageData(this.imageData, 0, canvasHeight - this.fireHeight);\n  }\n}\n","/**\n * Class representing the game\n */\n\nimport Skull from './skull.js';\nimport TitleScreen from './screens/title-screen.js';\nimport Fire from './components/fire.js';\nimport config from './config.js';\n\nfunction toggleCanvasOverlay() {\n  const canvasOverlayEl = document.getElementById('game-canvas-overlay');\n  canvasOverlayEl.classList.toggle('canvas__overlay--active');\n}\n\nfunction toggleHeader() {\n  const headerEl = document.getElementById('game-header');\n  headerEl.classList.toggle('header--hidden');\n}\n\nfunction updateScore(pointValue) {\n  const scoreEl = document.getElementById('game-score');\n  scoreEl.dataset.score =\n    pointValue !== 0 ? Number(scoreEl.dataset.score) + pointValue : 0;\n}\n\nfunction updateLife(lifePoints) {\n  const lifeEl = document.getElementById('game-life');\n  lifeEl.style['min-width'] = `${lifePoints}0px`;\n}\n\nfunction getClickPoint(evt) {\n  let clickPoint = {};\n  if (evt.targetTouches && evt.targetTouches.length === 1) {\n    // Touch event is fired before click event.\n    // Cancel click event in case of mobile.\n    evt.preventDefault();\n    const touch = evt.targetTouches[0];\n    clickPoint = {\n      xPos: touch.pageX,\n      yPos: touch.pageY\n    };\n  } else {\n    clickPoint = {\n      xPos: evt.offsetX,\n      yPos: evt.offsetY\n    };\n  }\n  return clickPoint;\n}\n\nexport default class Game {\n  constructor() {\n    // configuration settings\n    this.config = {\n      isSmallScreen: window.innerWidth < 800,\n      headerHeight: 60\n    };\n\n    // canvas element\n    this.canvas = document.getElementById('game-canvas');\n    this.canvas.width = this.config.isSmallScreen ? window.innerWidth : 800;\n    this.canvas.height = window.innerHeight;\n    // canvas context\n    this.ctx = this.canvas.getContext('2d');\n    // fire canvas element\n    this.fireCanvas = document.getElementById('fire-canvas');\n    this.fireCanvas.width = this.config.isSmallScreen ? window.innerWidth : 800;\n    this.fireCanvas.height = window.innerHeight;\n    // fireCanvas context\n    this.fireCtx = this.fireCanvas.getContext('2d');\n\n    // display components\n    this.components = {\n      fire: new Fire(\n        this.fireCtx,\n        this.fireCanvas.width,\n        this.fireCanvas.height\n      )\n    };\n\n    // skull score to display after destroying\n    this.displayScores = {};\n\n    // game screens\n    this.screens = {\n      titleScreen: new TitleScreen(\n        this.canvas.width,\n        this.canvas.height,\n        this.config.isSmallScreen\n      )\n    };\n\n    // the skulls\n    this.skulls = {};\n\n    // game state\n    this.state = {\n      currentScreen: 'title',\n      isGameTabHidden: false,\n      isPaused: false,\n      lastSkullCreateTime: 0,\n      lastTickTime: 0,\n      life: 10,\n      pauseTimestamp: 0,\n      score: 0,\n      skullFallSpeed: 10\n    };\n\n    // initialize event listeners\n    this.addEventListeners();\n  }\n\n  // Events\n  gameClickEvents(clickPoint) {\n    if (this.state.currentScreen === 'game') {\n      // Click event for skulls\n      // Don't run check if game is over.\n      // Don't run check if paused.\n      // Don't need to run check if there's no skulls.\n      // Don't allow skulls to pop when clicked in the header.\n      if (\n        this.state.life > 0 &&\n        !this.state.isPaused &&\n        Object.keys(this.skulls).length > 0 &&\n        clickPoint.yPos > this.config.headerHeight\n      ) {\n        Object.values(this.skulls).forEach(skull => {\n          if (skull.wasClicked(clickPoint)) {\n            updateScore(skull.pointValue);\n            skull.sfx.crunch.play();\n            this.displayScores[skull.id] = {\n              id: skull.id,\n              pointValue: skull.pointValue,\n              xPos: skull.xPos + skull.size / 2,\n              yPos: skull.yPos + skull.size / 2,\n              time: this.state.lastTickTime\n            };\n            delete this.skulls[skull.id];\n            // Increse speed when you destroy a skull\n            this.updateSpeed(this.state.skullFallSpeed + 1);\n          }\n        });\n      }\n    }\n  }\n\n  titleScreenClickEvents() {\n    if (this.state.currentScreen === 'title') {\n      this.state.currentScreen = 'game';\n      toggleHeader();\n      this.components.fire.sfx.play();\n      this.components.fire.sfx.volume = 1;\n    }\n  }\n\n  visibilityChangeEvent() {\n    // Event for when tab loses focus\n    document.addEventListener('visibilitychange', () => {\n      this.state.isGameTabHidden = document.hidden;\n      if (\n        this.state.currentScreen === 'game' &&\n        this.state.life > 0 &&\n        !this.state.isPaused\n      ) {\n        this.state.isPaused = true;\n        this.state.pauseTimestamp = this.state.lastTickTime;\n        this.components.fire.sfx.pause();\n        const gameControlsEl = document.getElementById('game-controls');\n        gameControlsEl.classList.toggle('play-control--paused');\n        toggleCanvasOverlay();\n      }\n      if (this.state.life === 0) {\n        this.state.isGameTabHidden\n          ? this.components.fire.sfx.pause()\n          : this.components.fire.sfx.play();\n      }\n    });\n  }\n\n  speedSliderEvent() {\n    // Click event for the speed slider control\n    const speedSliderBarEl = document.getElementById(\n      'game-speed-control-slider'\n    );\n    speedSliderBarEl.addEventListener('input', evt => {\n      this.state.skullFallSpeed = Number(speedSliderBarEl.value);\n    });\n  }\n\n  playControlEvent() {\n    // Click event for the pause/resume button\n    const gameControlsEl = document.getElementById('game-controls');\n    gameControlsEl.addEventListener('mousedown', () => {\n      if (this.state.life > 0) {\n        gameControlsEl.classList.toggle('play-control--paused');\n        this.state.isPaused = !this.state.isPaused;\n        toggleCanvasOverlay();\n        if (this.state.isPaused) {\n          this.state.pauseTimestamp = this.state.lastTickTime;\n          this.components.fire.sfx.pause();\n        } else {\n          this.components.fire.sfx.play();\n        }\n      }\n    });\n  }\n\n  addEventListeners() {\n    this.visibilityChangeEvent();\n    this.speedSliderEvent();\n    this.playControlEvent();\n\n    this.canvas.addEventListener('touchstart', evt => {\n      this.titleScreenClickEvents();\n      this.gameClickEvents(getClickPoint(evt));\n    });\n\n    this.canvas.addEventListener('click', evt => {\n      this.titleScreenClickEvents();\n      this.gameClickEvents(getClickPoint(evt));\n    });\n  }\n\n  createSkull() {\n    const newSkull = new Skull(\n      this.canvas.width,\n      this.config.headerHeight,\n      this.state.lastTickTime\n    );\n    this.skulls[newSkull.id] = newSkull;\n  }\n\n  addSkulls() {\n    // Add a new skull every second\n    if (this.state.lastTickTime - this.state.lastSkullCreateTime >= 1000) {\n      const skulls = Object.values(this.skulls);\n      if (skulls.length === 0) {\n        this.createSkull();\n      } else {\n        const lastSkull = skulls[skulls.length - 1];\n        // Avoid adding skulls on top of each other.\n        if (lastSkull && lastSkull.yPos >= lastSkull.size) {\n          this.createSkull();\n        }\n      }\n      this.state.lastSkullCreateTime = this.state.lastTickTime;\n    }\n  }\n\n  updateSkulls() {\n    Object.values(this.skulls).forEach(skull => {\n      skull.move(\n        this.state.skullFallSpeed,\n        this.state.lastTickTime,\n        this.state.isPaused,\n        this.state.pauseTimestamp\n      );\n      // Remove if out of bounds\n      if (skull.yPos >= this.canvas.height + skull.size) {\n        skull.sfx.burn.play();\n        delete this.skulls[skull.id];\n        this.state.life -= 1;\n        updateLife(this.state.life);\n        if (!this.state.life) {\n          this.state.gameOverTime = this.state.lastTickTime;\n        }\n      }\n    });\n  }\n\n  updateSpeed(newSpeed) {\n    if (newSpeed <= 100) {\n      // Click event for the speed slider control\n      const speedSliderBarEl = document.getElementById(\n        'game-speed-control-slider'\n      );\n      this.state.skullFallSpeed = newSpeed;\n      speedSliderBarEl.value = newSpeed;\n    }\n  }\n\n  drawScores() {\n    Object.values(this.displayScores).forEach(score => {\n      if (this.state.lastTickTime - score.time <= 500) {\n        this.ctx.textAlign = 'start';\n        this.ctx.font = `20px ${config.font}`;\n        this.ctx.fillStyle = config.scoreColor;\n        this.ctx.fillText(`+${score.pointValue}`, score.xPos, score.yPos);\n      } else {\n        delete this.displayScores[score.id];\n      }\n    });\n  }\n\n  runGame() {\n    if (this.state.isPaused) {\n      this.components.fire.sfx.pause();\n    } else if (!this.components.fire.sfx.played.length) {\n      // Start fire sfx if it has not yet\n      this.components.fire.sfx.play();\n    }\n\n    // Draw components and skulls\n    Object.values(this.skulls).forEach(skull => {\n      skull.draw(this.ctx);\n    });\n\n    this.components.fire.draw(\n      this.fireCtx,\n      this.fireCanvas.width,\n      this.fireCanvas.height\n    );\n    if (this.state.life === 0) {\n      this.gameOver();\n    }\n    this.drawScores();\n  }\n\n  resetGameState() {\n    this.skulls = {};\n    this.state.life = 10;\n    updateLife(this.state.life);\n    this.state.score = 0;\n    updateScore(0);\n    this.state.isPaused = false;\n    this.updateSpeed(10);\n  }\n\n  gameOver() {\n    this.ctx.textAlign = 'center';\n    const fontHeight = this.config.isSmallScreen ? 50 : 80;\n    this.ctx.font = `${fontHeight}px ${config.titleFont}`;\n    this.ctx.fillStyle = '#bb0a1e';\n    this.ctx.fillText(\n      'GAME OVER',\n      this.canvas.width / 2,\n      this.canvas.height / 2 - fontHeight\n    );\n    if (this.state.isGameTabHidden) {\n      this.state.gameOverTime +=\n        this.state.lastTickTime - this.state.gameOverTime;\n    }\n    if (this.state.lastTickTime - this.state.gameOverTime >= 5000) {\n      // Reset game state\n      this.resetGameState();\n      // Mute the fire sfx\n      this.components.fire.sfx.volume = 0;\n      // Remove the header\n      toggleHeader();\n      // Go back to title screen\n      this.state.currentScreen = 'title';\n      // Clear the fire canvas\n      this.fireCtx.clearRect(\n        0,\n        0,\n        this.fireCanvas.width,\n        this.fireCanvas.height\n      );\n    }\n  }\n\n  update() {\n    if (this.state.currentScreen === 'game' && this.state.life > 0) {\n      this.updateSkulls();\n      if (!this.state.isPaused) {\n        this.addSkulls();\n        this.components.fire.update(this.fireCanvas.width);\n      }\n    }\n  }\n\n  render() {\n    // Clear the canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    switch (this.state.currentScreen) {\n      case 'game': {\n        this.runGame();\n        break;\n      }\n      default: {\n        this.screens.titleScreen.load(this.ctx, this.config.isSmallScreen);\n      }\n    }\n  }\n\n  run(dTime) {\n    // Floor the delta to avoid float based math, and make animation smoother\n    this.state.lastTickTime = Math.floor(dTime);\n    window.requestAnimationFrame(dTime => this.run(dTime));\n    this.update();\n    this.render();\n  }\n}\n","import Game from './game.js';\nimport spiderWebImg from '../images/spider-web.svg';\nimport skullImg from '../images/skull.svg';\nimport playImg from '../images/play.svg';\nimport pauseImg from '../images/pause.svg';\nimport '../styles/main.scss';\n\nfunction preloadImages(cb) {\n  const imagesToPreload = [spiderWebImg, skullImg, playImg, pauseImg];\n  const images = [];\n  imagesToPreload.forEach((image, index) => {\n    images[index] = new Image();\n    images[index].src = image;\n  });\n  images[images.length - 1].addEventListener('load', () => {\n    cb();\n  });\n}\n\nconst game = new Game();\n\npreloadImages(() => {\n  // Ensure a fresh game state\n  game.resetGameState();\n  // Kick off main game loop\n  const firstGameTime = window.performance.now();\n  game.state.lastSkullCreateTime = firstGameTime;\n  game.run(firstGameTime);\n});\n","module.exports = __webpack_public_path__ + \"27662ad207610e3ed76bce537618eabd.svg\";","module.exports = __webpack_public_path__ + \"27126068ad3068d268ece96cf35fada4.wav\";"],"sourceRoot":""}