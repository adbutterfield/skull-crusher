{"version":3,"sources":["webpack:///./src/images/pause.svg","webpack:///./src/sounds/crunch02.mp3","webpack:///./src/images/play.svg","webpack:///./src/sounds/burn.wav","webpack:///./src/images/skull.svg","webpack:///./src/js/skull.js","webpack:///./src/js/config.js","webpack:///./src/js/screens/title-screen.js","webpack:///./src/js/components/header.js","webpack:///./src/js/components/control-button.js","webpack:///./src/js/components/score-display.js","webpack:///./src/js/components/speed-slider.js","webpack:///./src/js/components/fire.js","webpack:///./src/js/components/life-gauge.js","webpack:///./src/js/game.js","webpack:///./src/js/index.js","webpack:///./src/images/spider-web.svg","webpack:///./src/sounds/fire-1.wav"],"names":["module","exports","__webpack_require__","p","getXPosition","size","canvasWidth","min","max","Math","ceil","floor","random","skullId","Skull","headerHeight","lastTickTime","maxValue","_classCallCheck","this","id","pointValue","xPos","yPos","offset","skullImg","Image","src","SkullIcon","sfx","crunch","Audio","burn","CrunchSfx","volume","BurnSfx","ctx","drawImage","fallSpeed","thisTickTime","isPaused","pausedTimestamp","clickPoint","pow","config","backgroundColor","font","titleFont","scoreColor","textColor","TitleScreen","canvasHeight","isSmallScreen","title_screen_classCallCheck","centerX","spiderWebImg","height","width","SpiderWebIcon","title","subtitle","textAlign","concat","fillStyle","fillText","Header","header_classCallCheck","fillRect","moveTo","lineTo","stroke","ControlButton","control_button_classCallCheck","text","image","playImg","PlayIcon","pauseImg","PauseIcon","displayText","measureText","ScoreDisplay","score_display_classCallCheck","label","score","SpeedSlider","speed_slider_classCallCheck","dot","defaultXPos","line","xPosStart","xPosEnd","strokeStyle","isSliding","textHeight","beginPath","arc","PI","fill","newXPos","percent","FIRE_HEIGHT","Fire","fire_classCallCheck","threshold","imageData","createImageData","data","fire","length","FireSfx","colors","i","color","bottomLine","x","value","y","index","putImageData","life_gauge_classCallCheck","life","getClickPoint","evt","targetTouches","preventDefault","touch","pageX","pageY","offsetX","offsetY","Game","game_classCallCheck","window","innerWidth","canvas","document","getElementById","innerHeight","getContext","components","controlButton","header","scoreDisplay","speedSlider","lifeGauge","LifeGauge","displayScores","screens","titleScreen","skulls","state","currentScreen","lastSkullCreateTime","pauseTimestamp","skullFallSpeed","addEventListeners","_this","wasClicked","barWasClicked","moveToPointOnBar","getSkullFallSpeed","Object","keys","values","forEach","skull","play","time","updateSlider","_this2","addEventListener","gameClickEvents","gameMouseDownEvents","gameMouseMoveEvents","gameMouseUpEvents","newSkull","createSkull","lastSkull","_this3","move","gameOverTime","_this4","_this5","draw","gameOver","drawScores","fontHeight","reset","updateSkulls","addSkulls","clearRect","startGame","pause","load","dTime","_this6","requestAnimationFrame","run","update","render","game","firstGameTime","performance","now"],"mappings":"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","file":"main.bundle.js?4ee6f084c75632d67044","sourcesContent":["module.exports = __webpack_public_path__ + \"98f48c4b98369fa1c1b63b653ed0ea3e.svg\";","module.exports = __webpack_public_path__ + \"b44ba96b76b33b01a3ded944585d95f7.mp3\";","module.exports = __webpack_public_path__ + \"de8d272e1d85031c228dd258ade37a58.svg\";","module.exports = __webpack_public_path__ + \"0502bf4e41d1e7dddcd6fdec8a95a39e.wav\";","module.exports = __webpack_public_path__ + \"bf106e6a962421f0651f8e77797753c2.svg\";","/**\n * Class representing a skull\n */\nimport SkullIcon from '../images/skull.svg';\nimport CrunchSfx from '../sounds/crunch02.mp3';\nimport BurnSfx from '../sounds/burn.wav';\n\nfunction getRandomInt(maxValue) {\n  return Math.ceil(Math.random() * Math.floor(maxValue));\n}\n\nfunction getRandomIntInRange(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getXPosition(size, canvasWidth) {\n  const edgeOffset = 14;\n  return getRandomIntInRange(\n    edgeOffset + size,\n    canvasWidth - size - edgeOffset\n  );\n}\n\nfunction getPointValue(size) {\n  const maxPoints = 10;\n  return maxPoints - size / 10 + 1;\n}\n\nlet skullId = 0;\n\nclass Skull {\n  constructor(canvasWidth, headerHeight, lastTickTime) {\n    this.id = skullId++;\n    this.size = getRandomInt(10) * 10;\n    this.pointValue = getPointValue(this.size);\n    this.xPos = getXPosition(this.size, canvasWidth);\n    this.yPos = headerHeight - this.size;\n    this.lastTickTime = lastTickTime;\n    this.offset = 0;\n    this.skullImg = new Image();\n    this.skullImg.src = SkullIcon;\n    this.sfx = {\n      crunch: new Audio(),\n      burn: new Audio()\n    };\n    this.sfx.crunch.src = CrunchSfx;\n    this.sfx.crunch.volume = 0.2;\n    this.sfx.burn.src = BurnSfx;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.skullImg, this.xPos, this.yPos, this.size, this.size);\n  }\n\n  move(fallSpeed, thisTickTime, isPaused, pausedTimestamp) {\n    // In order to restart after a pause, we need to keep track of this offset\n    this.offset = !isPaused ? this.offset : pausedTimestamp - thisTickTime;\n    if (!isPaused) {\n      // pixels to move = milliseconds since last move * speed per 1000 milliseconds\n      this.yPos +=\n        (thisTickTime - this.lastTickTime + this.offset) * (fallSpeed / 1000);\n      this.lastTickTime = thisTickTime;\n      // Need to reset after restarting after a pause.\n      this.offset = 0;\n    }\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      (clickPoint.xPos - (this.xPos + this.size / 2)) ** 2 +\n        (clickPoint.yPos - (this.yPos + this.size / 2)) ** 2 <\n      (this.size / 2) ** 2\n    );\n  }\n}\n\nexport default Skull;\n","/**\n * Shared settings for game\n */\n\nexport default {\n  backgroundColor: '#000000',\n  font: 'Source Code Pro',\n  titleFont: 'Creepster',\n  scoreColor: '#00ff00',\n  textColor: '#cccccc'\n};\n","/**\n * Class representing title screen\n */\n\nimport config from '../config.js';\nimport SpiderWebIcon from '../../images/spider-web.svg';\n\nexport default class TitleScreen {\n  constructor(canvasWidth, canvasHeight, isSmallScreen) {\n    this.centerX = canvasWidth / 2;\n    this.spiderWebImg = new Image();\n    this.spiderWebImg.height = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.width = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.src = SpiderWebIcon;\n    this.title = {\n      size: isSmallScreen ? 40 : 80\n    };\n    this.title.yPos = canvasHeight / 2 - this.title.size;\n\n    this.subtitle = {\n      size: isSmallScreen ? 28 : 34\n    };\n    this.subtitle.yPos = canvasHeight / 2 + this.subtitle.size;\n  }\n\n  load(ctx, isSmallScreen) {\n    ctx.textAlign = 'center';\n\n    ctx.font = `${this.title.size}px ${config.titleFont}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SKULL CRUSHER', this.centerX, this.title.yPos);\n\n    ctx.font = `${this.subtitle.size}px  ${config.font}`;\n    ctx.fillText('Start', this.centerX, this.subtitle.yPos);\n\n    ctx.drawImage(\n      this.spiderWebImg,\n      isSmallScreen ? -50 : -80,\n      isSmallScreen ? -42 : -72,\n      isSmallScreen ? 120 : 200,\n      isSmallScreen ? 120 : 200\n    );\n  }\n}\n","/**\n * Class for header component\n */\n\nimport config from '../config.js';\n\nexport default class Header {\n  constructor(canvasWidth, height) {\n    this.xPos = 0;\n    this.yPos = 0;\n    this.width = canvasWidth;\n    this.height = height;\n  }\n\n  draw(ctx, canvasWidth) {\n    ctx.fillStyle = config.backgroundColor;\n    ctx.fillRect(this.xPos, this.yPos, this.width, this.height);\n\n    ctx.fillStyle = config.textColor;\n    ctx.moveTo(this.xPos, this.height);\n    ctx.lineTo(this.width, this.height);\n    ctx.stroke();\n  }\n}\n","/**\n * Class for pause/resume game control component\n */\n\nimport config from '../config.js';\nimport PlayIcon from '../../images/play.svg';\nimport PauseIcon from '../../images/pause.svg';\n\nexport default class ControlButton {\n  constructor(canvasWidth) {\n    this.text = {\n      width: 0,\n      xPos: canvasWidth - 115,\n      yPos: 30\n    };\n    this.image = {\n      xPos: canvasWidth - 105,\n      yPos: 14,\n      size: 18\n    };\n    this.playImg = new Image();\n    this.playImg.height = this.image.size;\n    this.playImg.width = this.image.size;\n    this.playImg.src = PlayIcon;\n    this.pauseImg = new Image();\n    this.pauseImg.height = this.image.size;\n    this.pauseImg.width = this.image.size;\n    this.pauseImg.src = PauseIcon;\n  }\n\n  draw(ctx, isPaused) {\n    const displayText = isPaused ? 'RESUME' : 'PAUSE';\n    this.text.width = ctx.measureText(displayText).width;\n    ctx.textAlign = 'end';\n    ctx.font = `20px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText(displayText, this.text.xPos, this.text.yPos);\n    ctx.drawImage(\n      isPaused ? this.playImg : this.pauseImg,\n      this.image.xPos,\n      this.image.yPos,\n      this.image.size,\n      this.image.size\n    );\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      clickPoint.xPos >= this.text.xPos - this.text.width &&\n      clickPoint.xPos <= this.image.xPos + this.image.size &&\n      clickPoint.yPos >= this.image.yPos &&\n      clickPoint.yPos <= this.image.yPos + this.image.size\n    );\n  }\n}\n","/**\n * Class for score display component\n */\n\nimport config from '../config.js';\n\nexport default class ScoreDisplay {\n  constructor() {\n    this.label = {\n      xPos: 20,\n      yPos: 30\n    };\n    this.score = {\n      xPos: 90,\n      yPos: 30\n    };\n  }\n  draw(ctx, score) {\n    ctx.textAlign = 'start';\n    // Score label\n    ctx.font = `20px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SCORE', this.label.xPos, this.label.yPos);\n    // Score\n    ctx.fillStyle = config.scoreColor;\n    ctx.fillText(score, this.score.xPos, this.score.yPos);\n  }\n}\n","/**\n * Class for speed slider component\n */\n\nimport config from '../config.js';\n\nexport default class SpeedSlider {\n  constructor(canvasWidth) {\n    this.label = {\n      xPos: canvasWidth - 175,\n      yPos: 50,\n      height: 14\n    };\n    this.dot = {\n      defaultXPos: canvasWidth - 120,\n      xPos: canvasWidth - 120,\n      yPos: 45,\n      size: 5\n    };\n    this.line = {\n      xPosStart: canvasWidth - 120,\n      xPosEnd: canvasWidth - 20,\n      yPos: 45\n    };\n    this.fillStyle = config.textColor;\n    this.strokeStyle = config.textColor;\n    this.isSliding = false;\n    this.textHeight = 0;\n  }\n\n  draw(ctx) {\n    ctx.textAlign = 'start';\n    // Speed slider label\n    ctx.font = `${this.label.height}px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SPEED', this.label.xPos, this.label.yPos);\n    ctx.beginPath();\n    // Speed slider dot\n    ctx.arc(this.dot.xPos, this.dot.yPos, this.dot.size, 0, Math.PI * 2, false);\n    ctx.strokeStyle = this.strokeStyle;\n    ctx.fillStyle = this.fillStyle;\n    ctx.fill();\n    // Speed slider line\n    ctx.moveTo(this.line.xPosStart, this.line.yPos);\n    ctx.lineTo(this.line.xPosEnd, this.line.yPos);\n    ctx.stroke();\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      (clickPoint.xPos - this.dot.xPos) ** 2 +\n        (clickPoint.yPos - this.dot.yPos) ** 2 <\n      (this.dot.size * 2) ** 2\n    );\n  }\n\n  reset() {\n    this.dot.xPos = this.dot.defaultXPos;\n  }\n\n  updateSlider(newXPos) {\n    if (\n      this.isSliding &&\n      newXPos >= this.line.xPosStart &&\n      newXPos <= this.line.xPosEnd\n    ) {\n      this.dot.xPos = newXPos;\n    }\n  }\n\n  moveToPointOnBar(newXPos) {\n    this.dot.xPos = newXPos;\n  }\n\n  barWasClicked(clickPoint) {\n    return (\n      clickPoint.yPos >= this.label.yPos - this.label.height / 2 &&\n      clickPoint.yPos <= this.label.yPos + this.label.height / 2 &&\n      clickPoint.xPos >= this.line.xPosStart &&\n      clickPoint.xPos <= this.line.xPosEnd\n    );\n  }\n\n  getSkullFallSpeed() {\n    const percent = Math.floor(\n      ((this.dot.xPos - this.line.xPosStart) /\n        (this.line.xPosEnd - this.line.xPosStart)) *\n        100\n    );\n    const range = this.line.xPosEnd - this.line.xPosStart;\n    const value = Math.floor((percent / 100) * 90) + 10;\n    return value;\n  }\n}\n","/**\n * Class for fire at the bottom of game screen\n * @description Fire effect borrowed from: https://www.ssaurel.com/fireeffect/fireeffect.htm\n */\n\nimport FireSfx from '../../sounds/fire-1.wav';\nconst FIRE_HEIGHT = 60;\n\nexport default class Fire {\n  constructor(ctx, canvasWidth, canvasHeight) {\n    this.threshold = 0.5;\n    this.imageData = ctx.createImageData(canvasWidth, FIRE_HEIGHT);\n    this.data = this.imageData.data;\n    this.fire = [];\n    this.fire.length = canvasWidth * FIRE_HEIGHT;\n    this.fire.fill(0);\n    this.sfx = new Audio();\n    this.sfx.src = FireSfx;\n    this.colors = [];\n    this.colors.length = 256;\n    for (let i = 0; i < 256; i++) {\n      let color = [];\n      color[0] = color[1] = color[2] = color[3] = 0;\n      this.colors[i] = color;\n    }\n\n    for (let i = 0; i < 32; ++i) {\n      this.colors[i][2] = i << 1;\n      this.colors[i + 32][0] = i << 3;\n      this.colors[i + 32][2] = 64 - (i << 1);\n      this.colors[i + 64][0] = 255;\n      this.colors[i + 64][1] = i << 3;\n      this.colors[i + 96][0] = 255;\n      this.colors[i + 96][1] = 255;\n      this.colors[i + 96][2] = i << 2;\n      this.colors[i + 128][0] = 255;\n      this.colors[i + 128][1] = 255;\n      this.colors[i + 128][2] = 64 + (i << 2);\n      this.colors[i + 160][0] = 255;\n      this.colors[i + 160][1] = 255;\n      this.colors[i + 160][2] = 128 + (i << 2);\n      this.colors[i + 192][0] = 255;\n      this.colors[i + 192][1] = 255;\n      this.colors[i + 192][2] = 192 + i;\n      this.colors[i + 224][0] = 255;\n      this.colors[i + 224][1] = 255;\n      this.colors[i + 224][2] = 224 + i;\n    }\n  }\n\n  draw(ctx, canvasWidth, canvasHeight, isPaused) {\n    if (!isPaused) {\n      let bottomLine = canvasWidth * (FIRE_HEIGHT - 1);\n      // draw random pixels at the bottom line\n      for (let x = 0; x < canvasWidth; x++) {\n        let value = 0;\n\n        if (Math.random() > this.threshold) value = 255;\n\n        this.fire[bottomLine + x] = value;\n      }\n\n      // move flip upwards, start at bottom\n      let value = 0;\n\n      for (let y = 0; y < FIRE_HEIGHT; ++y) {\n        for (let x = 0; x < canvasWidth; ++x) {\n          if (x === 0) {\n            value = this.fire[bottomLine];\n            value += this.fire[bottomLine];\n            value += this.fire[bottomLine - canvasWidth];\n            value /= 3;\n          } else if (x === canvasWidth - 1) {\n            value = this.fire[bottomLine + x];\n            value += this.fire[bottomLine - canvasWidth + x];\n            value += this.fire[bottomLine + x - 1];\n            value /= 3;\n          } else {\n            value = this.fire[bottomLine + x];\n            value += this.fire[bottomLine + x + 1];\n            value += this.fire[bottomLine + x - 1];\n            value += this.fire[bottomLine - canvasWidth + x];\n            value /= 4;\n          }\n\n          if (value > 1) value -= 1;\n\n          value = Math.floor(value);\n          let index = bottomLine - canvasWidth + x;\n          this.fire[index] = value;\n        }\n\n        bottomLine -= canvasWidth;\n      }\n    }\n\n    let skipRows = 2; // skip the bottom 2 rows\n    // render the flames using our color table\n    for (let y = skipRows; y < FIRE_HEIGHT; ++y) {\n      for (let x = 0; x < canvasWidth; ++x) {\n        let index = y * canvasWidth * 4 + x * 4;\n        let value = this.fire[(y - skipRows) * canvasWidth + x];\n        this.data[index] = this.colors[value][0];\n        this.data[++index] = this.colors[value][1];\n        this.data[++index] = this.colors[value][2];\n        this.data[++index] = 255;\n      }\n    }\n    ctx.putImageData(this.imageData, 0, canvasHeight - FIRE_HEIGHT);\n  }\n}\n","/**\n * Class for life gauge component\n */\n\nimport config from '../config.js';\n\nexport default class SpeedSlider {\n  constructor(ctx) {\n    this.label = {\n      xPos: 20,\n      yPos: 50,\n      height: 14,\n      width: ctx.measureText('LIFE').width + 10\n    };\n  }\n\n  draw(ctx, life) {\n    ctx.textAlign = 'start';\n    ctx.font = `${this.label.height}px ${config.font}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('LIFE', this.label.xPos, this.label.yPos);\n    for (let i = 0; i < 10; i++) {\n      ctx.fillStyle = i < life ? '#ffffff' : '#bb0a1e';\n      ctx.fillRect(\n        this.label.xPos + this.label.width + 10 + i * 10,\n        this.label.yPos - 11,\n        6,\n        this.label.height - 2\n      );\n    }\n  }\n}\n","/**\n * Class representing the game\n */\n\nimport Skull from './skull.js';\nimport TitleScreen from './screens/title-screen.js';\nimport Header from './components/header.js';\nimport ControlButton from './components/control-button.js';\nimport ScoreDisplay from './components/score-display.js';\nimport SpeedSlider from './components/speed-slider.js';\nimport Fire from './components/fire.js';\nimport LifeGauge from './components/life-gauge.js';\nimport config from './config.js';\n\nfunction getClickPoint(evt) {\n  let clickPoint = {};\n  if (evt.targetTouches && evt.targetTouches.length === 1) {\n    // Touch event is fired before click event.\n    // Cancel click event in case of mobile.\n    evt.preventDefault();\n    const touch = evt.targetTouches[0];\n    clickPoint = {\n      xPos: touch.pageX,\n      yPos: touch.pageY\n    };\n  } else {\n    clickPoint = {\n      xPos: evt.offsetX,\n      yPos: evt.offsetY\n    };\n  }\n  return clickPoint;\n}\n\nexport default class Game {\n  constructor() {\n    // configuration settings\n    this.config = {\n      isSmallScreen: window.innerWidth < 800,\n      headerHeight: 60\n    };\n\n    // canvas element\n    this.canvas = document.getElementById('game');\n    this.canvas.width = this.config.isSmallScreen ? window.innerWidth : 800;\n    this.canvas.height = window.innerHeight;\n    // canvas context\n    this.ctx = this.canvas.getContext('2d');\n\n    // display components\n    this.components = {\n      controlButton: new ControlButton(this.canvas.width),\n      header: new Header(this.canvas.width, this.config.headerHeight),\n      fire: new Fire(this.ctx, this.canvas.width, this.canvas.height),\n      scoreDisplay: new ScoreDisplay(),\n      speedSlider: new SpeedSlider(this.canvas.width),\n      lifeGauge: new LifeGauge(this.ctx)\n    };\n\n    // skull score to display after destroying\n    this.displayScores = {};\n\n    // game screens\n    this.screens = {\n      titleScreen: new TitleScreen(\n        this.canvas.width,\n        this.canvas.height,\n        this.config.isSmallScreen\n      )\n    };\n\n    // the skulls\n    this.skulls = {};\n\n    // game state\n    this.state = {\n      clickPoint: {},\n      currentScreen: 'title',\n      isPaused: false,\n      lastSkullCreateTime: 0,\n      lastTickTime: 0,\n      life: 10,\n      pauseTimestamp: 0,\n      score: 0,\n      skullFallSpeed: 10\n    };\n\n    // initialize event listeners\n    this.addEventListeners();\n  }\n\n  // Events\n  gameClickEvents(clickPoint) {\n    if (this.state.currentScreen === 'game') {\n      // Click event for the pause/resume button\n      if (\n        this.state.life > 0 &&\n        this.components.controlButton.wasClicked(clickPoint)\n      ) {\n        this.state.isPaused = !this.state.isPaused;\n        this.state.pauseTimestamp = this.state.isPaused\n          ? this.state.lastTickTime\n          : 0;\n      }\n      // Click event for the speed adjustment slider\n      if (this.components.speedSlider.barWasClicked(clickPoint)) {\n        this.components.speedSlider.moveToPointOnBar(clickPoint.xPos);\n        this.state.skullFallSpeed = this.components.speedSlider.getSkullFallSpeed();\n      }\n\n      // Click event for skulls\n      // Don't run check if game is over.\n      // Don't run check if paused.\n      // Don't need to run check if there's no skulls.\n      // Don't allow skulls to pop when clicked in the header.\n      if (\n        this.state.life > 0 &&\n        !this.state.isPaused &&\n        Object.keys(this.skulls).length > 0 &&\n        clickPoint.yPos > this.config.headerHeight\n      ) {\n        Object.values(this.skulls).forEach(skull => {\n          if (skull.wasClicked(clickPoint)) {\n            this.state.score += skull.pointValue;\n            skull.sfx.crunch.play();\n            this.displayScores[skull.id] = {\n              id: skull.id,\n              pointValue: skull.pointValue,\n              xPos: skull.xPos + skull.size / 2,\n              yPos: skull.yPos + skull.size / 2,\n              time: this.state.lastTickTime\n            };\n            delete this.skulls[skull.id];\n          }\n        });\n      }\n    }\n  }\n\n  gameMouseDownEvents(clickPoint) {\n    if (this.state.currentScreen === 'game') {\n      if (this.components.speedSlider.wasClicked(clickPoint)) {\n        this.components.speedSlider.isSliding = true;\n      }\n    }\n  }\n\n  gameMouseMoveEvents(evt) {\n    if (this.state.currentScreen === 'game') {\n      if (this.components.speedSlider.isSliding) {\n        this.state.clickPoint = getClickPoint(evt);\n        this.components.speedSlider.updateSlider(this.state.clickPoint.xPos);\n        this.state.skullFallSpeed = this.components.speedSlider.getSkullFallSpeed();\n      }\n    }\n  }\n\n  gameMouseUpEvents(evt) {\n    if (this.state.currentScreen === 'game') {\n      if (this.components.speedSlider.isSliding) {\n        this.components.speedSlider.isSliding = false;\n      }\n    }\n  }\n\n  addEventListeners() {\n    if (this.state.currentScreen === 'title') {\n      this.canvas.addEventListener('click', evt => {\n        this.state.currentScreen = 'game';\n      });\n      this.canvas.addEventListener('touchstart', evt => {\n        this.state.currentScreen = 'game';\n      });\n    }\n    this.canvas.addEventListener('click', evt => {\n      this.gameClickEvents(this.state.clickPoint);\n    });\n    this.canvas.addEventListener('mousedown', evt => {\n      this.state.clickPoint = getClickPoint(evt);\n      this.gameMouseDownEvents(this.state.clickPoint);\n    });\n    this.canvas.addEventListener('touchstart', evt => {\n      this.state.clickPoint = getClickPoint(evt);\n      this.gameClickEvents(this.state.clickPoint);\n      this.gameMouseDownEvents(this.state.clickPoint);\n    });\n    this.canvas.addEventListener('mousemove', evt => {\n      this.gameMouseMoveEvents(evt);\n    });\n    this.canvas.addEventListener('touchmove', evt => {\n      this.gameMouseMoveEvents(evt);\n    });\n    this.canvas.addEventListener('mouseup', evt => {\n      this.gameMouseUpEvents(evt);\n    });\n    this.canvas.addEventListener('touchend', evt => {\n      this.gameMouseUpEvents(evt);\n    });\n  }\n\n  createSkull() {\n    return new Skull(\n      this.canvas.width,\n      this.config.headerHeight,\n      this.state.lastTickTime\n    );\n  }\n\n  addSkulls() {\n    if (\n      this.state.currentScreen === 'game' &&\n      this.state.life > 0 &&\n      !this.state.isPaused\n    ) {\n      if (this.state.lastTickTime - this.state.lastSkullCreateTime >= 1000) {\n        const skulls = Object.values(this.skulls);\n        if (skulls.length === 0) {\n          const newSkull = this.createSkull();\n          this.skulls[newSkull.id] = newSkull;\n        }\n        const lastSkull = skulls[skulls.length - 1];\n        // Don't add skulls on top of each other.\n        if (lastSkull && lastSkull.yPos >= lastSkull.size) {\n          const newSkull = this.createSkull();\n          this.skulls[newSkull.id] = newSkull;\n        }\n        this.state.lastSkullCreateTime = this.state.lastTickTime;\n      }\n    }\n  }\n\n  updateSkulls() {\n    Object.values(this.skulls).forEach(skull => {\n      if (this.state.currentScreen === 'game') {\n        skull.move(\n          this.state.skullFallSpeed,\n          this.state.lastTickTime,\n          this.state.isPaused,\n          this.state.pauseTimestamp\n        );\n        // Remove if out of bounds\n        if (skull.yPos >= this.canvas.height + skull.size) {\n          skull.sfx.burn.play();\n          delete this.skulls[skull.id];\n          this.state.life -= 1;\n          if (!this.state.life) {\n            this.state.gameOverTime = this.state.lastTickTime;\n          }\n        }\n      }\n    });\n  }\n\n  drawScores() {\n    Object.values(this.displayScores).forEach(score => {\n      if (this.state.lastTickTime - score.time <= 500) {\n        this.ctx.textAlign = 'start';\n        this.ctx.font = `20px ${config.font}`;\n        this.ctx.fillStyle = config.scoreColor;\n        this.ctx.fillText(`+${score.pointValue}`, score.xPos, score.yPos);\n      } else {\n        delete this.displayScores[score.id];\n      }\n    });\n  }\n\n  startGame() {\n    // Draw components and skulls\n    this.components.fire.draw(\n      this.ctx,\n      this.canvas.width,\n      this.canvas.height,\n      this.state.isPaused\n    );\n    Object.values(this.skulls).forEach(skull => {\n      skull.draw(this.ctx);\n    });\n    if (this.state.life === 0) {\n      this.gameOver();\n    }\n    this.drawScores();\n    this.components.header.draw(this.ctx, this.canvas.width);\n    this.components.scoreDisplay.draw(this.ctx, this.state.score);\n    this.components.speedSlider.draw(this.ctx);\n    this.components.controlButton.draw(this.ctx, this.state.isPaused);\n    this.components.lifeGauge.draw(this.ctx, this.state.life);\n  }\n\n  gameOver() {\n    this.ctx.textAlign = 'center';\n    const fontHeight = this.config.isSmallScreen ? 40 : 80;\n    this.ctx.font = `${fontHeight}px ${config.titleFont}`;\n    this.ctx.fillStyle = '#bb0a1e';\n    this.ctx.fillText(\n      'GAME OVER',\n      this.canvas.width / 2,\n      this.canvas.height / 2 - fontHeight\n    );\n    if (this.state.lastTickTime - this.state.gameOverTime >= 5000) {\n      // Reset game state\n      this.state.skullFallSpeed = 10;\n      this.skulls = {};\n      this.state.life = 10;\n      this.state.score = 0;\n      this.state.isPaused = false;\n      // Reset the speed slider\n      this.components.speedSlider.reset();\n      // Mute the fire sfx\n      this.components.fire.sfx.volume = 0;\n      // Go back to title screen\n      this.state.currentScreen = 'title';\n    }\n  }\n\n  update() {\n    if (this.state.life > 0) {\n      this.updateSkulls();\n      this.addSkulls();\n    }\n  }\n\n  render() {\n    // Clear the canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    switch (this.state.currentScreen) {\n      case 'game': {\n        this.startGame();\n        if (this.state.isPaused) {\n          this.components.fire.sfx.pause();\n        } else {\n          this.components.fire.sfx.play();\n        }\n        break;\n      }\n      default: {\n        this.screens.titleScreen.load(this.ctx, this.config.isSmallScreen);\n      }\n    }\n  }\n\n  run(dTime) {\n    this.state.lastTickTime = dTime;\n    window.requestAnimationFrame(dTime => this.run(dTime));\n    this.update();\n    this.render();\n  }\n}\n","import Game from './game.js';\nimport '../style.scss';\n\nconst game = new Game();\n\n// Kick off main game loop\nconst firstGameTime = window.performance.now();\ngame.state.lastSkullCreateTime = firstGameTime;\ngame.run(firstGameTime);\n","module.exports = __webpack_public_path__ + \"27662ad207610e3ed76bce537618eabd.svg\";","module.exports = __webpack_public_path__ + \"27126068ad3068d268ece96cf35fada4.wav\";"],"sourceRoot":""}