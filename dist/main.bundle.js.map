{"version":3,"sources":["webpack:///./src/sounds/crunch02.mp3","webpack:///./src/sounds/burn.wav","webpack:///./src/images/skull.svg","webpack:///./src/js/skull.js","webpack:///./src/js/config.js","webpack:///./src/js/screens/title-screen.js","webpack:///./src/js/components/fire.js","webpack:///./src/js/game.js","webpack:///./src/js/index.js","webpack:///./src/images/spider-web.svg","webpack:///./src/sounds/fire-1.wav"],"names":["module","exports","__webpack_require__","p","getXPosition","size","canvasWidth","min","max","Math","ceil","floor","random","skullId","Skull","headerHeight","lastTickTime","maxValue","_classCallCheck","this","id","pointValue","xPos","yPos","offset","skullImg","Image","src","SkullIcon","sfx","crunch","Audio","burn","CrunchSfx","volume","BurnSfx","ctx","drawImage","fallSpeed","thisTickTime","isPaused","pausedTimestamp","clickPoint","pow","config","TitleScreen","canvasHeight","isSmallScreen","title_screen_classCallCheck","centerX","spiderWebImg","height","width","SpiderWebIcon","title","subtitle","textAlign","font","concat","fillStyle","fillText","FIRE_HEIGHT","Fire","_this","fire_classCallCheck","threshold","imageData","createImageData","data","fire","length","fill","FireSfx","addEventListener","play","colors","i","color","bottomLine","x","value","y","index","putImageData","toggleCanvasOverlay","document","getElementById","classList","toggle","toggleHeader","updateScore","scoreEl","dataset","score","Number","updateLife","lifePoints","style","getClickPoint","evt","targetTouches","preventDefault","touch","pageX","pageY","offsetX","offsetY","Game","game_classCallCheck","window","innerWidth","canvas","innerHeight","getContext","components","displayScores","screens","titleScreen","skulls","state","currentScreen","isGameTabHidden","lastSkullCreateTime","life","pauseTimestamp","skullFallSpeed","speedSliderIsSliding","addEventListeners","Object","keys","values","forEach","skull","wasClicked","time","_this2","hidden","pause","speedSliderBarEl","gameControlsEl","titleScreenClickEvents","gameClickEvents","newSkull","createSkull","lastSkull","_this3","move","gameOverTime","_this4","_this5","draw","gameOver","drawScores","fontHeight","updateSkulls","addSkulls","clearRect","runGame","load","dTime","_this6","requestAnimationFrame","run","update","render","game","firstGameTime","performance","now"],"mappings":"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","file":"main.bundle.js?f898df45fc2673304679","sourcesContent":["module.exports = __webpack_public_path__ + \"b44ba96b76b33b01a3ded944585d95f7.mp3\";","module.exports = __webpack_public_path__ + \"0502bf4e41d1e7dddcd6fdec8a95a39e.wav\";","module.exports = __webpack_public_path__ + \"bf106e6a962421f0651f8e77797753c2.svg\";","/**\n * Class representing a skull\n */\nimport SkullIcon from '../images/skull.svg';\nimport CrunchSfx from '../sounds/crunch02.mp3';\nimport BurnSfx from '../sounds/burn.wav';\n\nfunction getRandomInt(maxValue) {\n  return Math.ceil(Math.random() * Math.floor(maxValue));\n}\n\nfunction getRandomIntInRange(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getXPosition(size, canvasWidth) {\n  const edgeOffset = 14;\n  return getRandomIntInRange(\n    edgeOffset + size,\n    canvasWidth - size - edgeOffset\n  );\n}\n\nfunction getPointValue(size) {\n  const maxPoints = 10;\n  return maxPoints - size / 10 + 1;\n}\n\nlet skullId = 0;\n\nclass Skull {\n  constructor(canvasWidth, headerHeight, lastTickTime) {\n    this.id = skullId++;\n    this.size = getRandomInt(10) * 10;\n    this.pointValue = getPointValue(this.size);\n    this.xPos = getXPosition(this.size, canvasWidth);\n    this.yPos = headerHeight - this.size;\n    this.lastTickTime = lastTickTime;\n    this.offset = 0;\n    this.skullImg = new Image();\n    this.skullImg.src = SkullIcon;\n    this.sfx = {\n      crunch: new Audio(),\n      burn: new Audio()\n    };\n    this.sfx.crunch.src = CrunchSfx;\n    this.sfx.crunch.volume = 0.2;\n    this.sfx.burn.src = BurnSfx;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.skullImg, this.xPos, this.yPos, this.size, this.size);\n  }\n\n  move(fallSpeed, thisTickTime, isPaused, pausedTimestamp) {\n    // In order to restart after a pause, we need to keep track of this offset\n    this.offset = !isPaused ? this.offset : pausedTimestamp - thisTickTime;\n    if (!isPaused) {\n      // pixels to move = milliseconds since last move * speed per 1000 milliseconds\n      this.yPos +=\n        (thisTickTime - this.lastTickTime + this.offset) * (fallSpeed / 1000);\n      this.lastTickTime = thisTickTime;\n      // Need to reset after restarting after a pause.\n      this.offset = 0;\n    }\n  }\n\n  wasClicked(clickPoint) {\n    return (\n      (clickPoint.xPos - (this.xPos + this.size / 2)) ** 2 +\n        (clickPoint.yPos - (this.yPos + this.size / 2)) ** 2 <\n      (this.size / 2) ** 2\n    );\n  }\n}\n\nexport default Skull;\n","/**\n * Shared settings for game\n */\n\nexport default {\n  backgroundColor: '#000000',\n  font: 'Source Code Pro',\n  titleFont: 'Creepster',\n  scoreColor: '#00ff00',\n  textColor: '#cccccc'\n};\n","/**\n * Class representing title screen\n */\n\nimport config from '../config.js';\nimport SpiderWebIcon from '../../images/spider-web.svg';\n\nexport default class TitleScreen {\n  constructor(canvasWidth, canvasHeight, isSmallScreen) {\n    this.centerX = canvasWidth / 2;\n    this.spiderWebImg = new Image();\n    this.spiderWebImg.height = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.width = isSmallScreen ? 120 : 200;\n    this.spiderWebImg.src = SpiderWebIcon;\n    this.title = {\n      size: isSmallScreen ? 50 : 80\n    };\n    this.title.yPos = canvasHeight / 2 - this.title.size;\n\n    this.subtitle = {\n      size: isSmallScreen ? 28 : 34\n    };\n    this.subtitle.yPos = canvasHeight / 2 + this.subtitle.size;\n  }\n\n  load(ctx, isSmallScreen) {\n    ctx.textAlign = 'center';\n\n    ctx.font = `${this.title.size}px ${config.titleFont}`;\n    ctx.fillStyle = config.textColor;\n    ctx.fillText('SKULL CRUSHER', this.centerX, this.title.yPos);\n\n    ctx.font = `${this.subtitle.size}px  ${config.font}`;\n    ctx.fillText('Start', this.centerX, this.subtitle.yPos);\n\n    ctx.drawImage(\n      this.spiderWebImg,\n      isSmallScreen ? -50 : -80,\n      isSmallScreen ? -42 : -72,\n      isSmallScreen ? 120 : 200,\n      isSmallScreen ? 120 : 200\n    );\n  }\n}\n","/**\n * Class for fire at the bottom of game screen\n * @description Fire effect borrowed from: https://www.ssaurel.com/fireeffect/fireeffect.htm\n */\n\nimport FireSfx from '../../sounds/fire-1.wav';\nconst FIRE_HEIGHT = 60;\n\nexport default class Fire {\n  constructor(ctx, canvasWidth, canvasHeight) {\n    this.threshold = 0.5;\n    this.imageData = ctx.createImageData(canvasWidth, FIRE_HEIGHT);\n    this.data = this.imageData.data;\n    this.fire = [];\n    this.fire.length = canvasWidth * FIRE_HEIGHT;\n    this.fire.fill(0);\n    this.sfx = new Audio();\n    this.sfx.src = FireSfx;\n    this.sfx.addEventListener('ended', () => {\n      this.sfx.play();\n    });\n    this.colors = [];\n    this.colors.length = 256;\n    for (let i = 0; i < 256; i++) {\n      let color = [];\n      color[0] = color[1] = color[2] = color[3] = 0;\n      this.colors[i] = color;\n    }\n\n    for (let i = 0; i < 32; ++i) {\n      this.colors[i][2] = i << 1;\n      this.colors[i + 32][0] = i << 3;\n      this.colors[i + 32][2] = 64 - (i << 1);\n      this.colors[i + 64][0] = 255;\n      this.colors[i + 64][1] = i << 3;\n      this.colors[i + 96][0] = 255;\n      this.colors[i + 96][1] = 255;\n      this.colors[i + 96][2] = i << 2;\n      this.colors[i + 128][0] = 255;\n      this.colors[i + 128][1] = 255;\n      this.colors[i + 128][2] = 64 + (i << 2);\n      this.colors[i + 160][0] = 255;\n      this.colors[i + 160][1] = 255;\n      this.colors[i + 160][2] = 128 + (i << 2);\n      this.colors[i + 192][0] = 255;\n      this.colors[i + 192][1] = 255;\n      this.colors[i + 192][2] = 192 + i;\n      this.colors[i + 224][0] = 255;\n      this.colors[i + 224][1] = 255;\n      this.colors[i + 224][2] = 224 + i;\n    }\n  }\n\n  draw(ctx, canvasWidth, canvasHeight, isPaused) {\n    if (!isPaused) {\n      let bottomLine = canvasWidth * (FIRE_HEIGHT - 1);\n      // draw random pixels at the bottom line\n      for (let x = 0; x < canvasWidth; x++) {\n        let value = 0;\n\n        if (Math.random() > this.threshold) value = 255;\n\n        this.fire[bottomLine + x] = value;\n      }\n\n      // move flip upwards, start at bottom\n      let value = 0;\n\n      for (let y = 0; y < FIRE_HEIGHT; ++y) {\n        for (let x = 0; x < canvasWidth; ++x) {\n          if (x === 0) {\n            value = this.fire[bottomLine];\n            value += this.fire[bottomLine];\n            value += this.fire[bottomLine - canvasWidth];\n            value /= 3;\n          } else if (x === canvasWidth - 1) {\n            value = this.fire[bottomLine + x];\n            value += this.fire[bottomLine - canvasWidth + x];\n            value += this.fire[bottomLine + x - 1];\n            value /= 3;\n          } else {\n            value = this.fire[bottomLine + x];\n            value += this.fire[bottomLine + x + 1];\n            value += this.fire[bottomLine + x - 1];\n            value += this.fire[bottomLine - canvasWidth + x];\n            value /= 4;\n          }\n\n          if (value > 1) value -= 1;\n\n          value = Math.floor(value);\n          let index = bottomLine - canvasWidth + x;\n          this.fire[index] = value;\n        }\n\n        bottomLine -= canvasWidth;\n      }\n    }\n\n    let skipRows = 2; // skip the bottom 2 rows\n    // render the flames using our color table\n    for (let y = skipRows; y < FIRE_HEIGHT; ++y) {\n      for (let x = 0; x < canvasWidth; ++x) {\n        let index = y * canvasWidth * 4 + x * 4;\n        let value = this.fire[(y - skipRows) * canvasWidth + x];\n        this.data[index] = this.colors[value][0];\n        this.data[++index] = this.colors[value][1];\n        this.data[++index] = this.colors[value][2];\n        this.data[++index] = 255;\n      }\n    }\n    ctx.putImageData(this.imageData, 0, canvasHeight - FIRE_HEIGHT);\n  }\n}\n","/**\n * Class representing the game\n */\n\nimport Skull from './skull.js';\nimport TitleScreen from './screens/title-screen.js';\nimport Fire from './components/fire.js';\nimport config from './config.js';\n\nfunction toggleCanvasOverlay() {\n  const canvasOverlayEl = document.getElementById('game-canvas-overlay');\n  canvasOverlayEl.classList.toggle('canvas__overlay--active');\n}\n\nfunction toggleHeader() {\n  const headerEl = document.getElementById('game-header');\n  headerEl.classList.toggle('header--hidden');\n}\n\nfunction updateScore(pointValue) {\n  const scoreEl = document.getElementById('game-score');\n  scoreEl.dataset.score =\n    pointValue !== 0 ? Number(scoreEl.dataset.score) + pointValue : 0;\n}\n\nfunction updateLife(lifePoints) {\n  const lifeEl = document.getElementById('game-life');\n  lifeEl.style['min-width'] = `${lifePoints}0px`;\n}\n\nfunction getClickPoint(evt) {\n  let clickPoint = {};\n  if (evt.targetTouches && evt.targetTouches.length === 1) {\n    // Touch event is fired before click event.\n    // Cancel click event in case of mobile.\n    evt.preventDefault();\n    const touch = evt.targetTouches[0];\n    clickPoint = {\n      xPos: touch.pageX,\n      yPos: touch.pageY\n    };\n  } else {\n    clickPoint = {\n      xPos: evt.offsetX,\n      yPos: evt.offsetY\n    };\n  }\n  return clickPoint;\n}\n\nexport default class Game {\n  constructor() {\n    // configuration settings\n    this.config = {\n      isSmallScreen: window.innerWidth < 800,\n      headerHeight: 60\n    };\n\n    // canvas element\n    this.canvas = document.getElementById('game');\n    this.canvas.width = this.config.isSmallScreen ? window.innerWidth : 800;\n    this.canvas.height = window.innerHeight;\n    // canvas context\n    this.ctx = this.canvas.getContext('2d');\n\n    // display components\n    this.components = {\n      fire: new Fire(this.ctx, this.canvas.width, this.canvas.height)\n    };\n\n    // skull score to display after destroying\n    this.displayScores = {};\n\n    // game screens\n    this.screens = {\n      titleScreen: new TitleScreen(\n        this.canvas.width,\n        this.canvas.height,\n        this.config.isSmallScreen\n      )\n    };\n\n    // the skulls\n    this.skulls = {};\n\n    // game state\n    this.state = {\n      currentScreen: 'title',\n      isGameTabHidden: false,\n      isPaused: false,\n      lastSkullCreateTime: 0,\n      lastTickTime: 0,\n      life: 10,\n      pauseTimestamp: 0,\n      score: 0,\n      skullFallSpeed: 10,\n      speedSliderIsSliding: false\n    };\n\n    // initialize event listeners\n    this.addEventListeners();\n  }\n\n  // Events\n  gameClickEvents(clickPoint) {\n    if (this.state.currentScreen === 'game') {\n      // Click event for skulls\n      // Don't run check if game is over.\n      // Don't run check if paused.\n      // Don't need to run check if there's no skulls.\n      // Don't allow skulls to pop when clicked in the header.\n      if (\n        this.state.life > 0 &&\n        !this.state.isPaused &&\n        Object.keys(this.skulls).length > 0 &&\n        clickPoint.yPos > this.config.headerHeight\n      ) {\n        Object.values(this.skulls).forEach(skull => {\n          if (skull.wasClicked(clickPoint)) {\n            updateScore(skull.pointValue);\n            skull.sfx.crunch.play();\n            this.displayScores[skull.id] = {\n              id: skull.id,\n              pointValue: skull.pointValue,\n              xPos: skull.xPos + skull.size / 2,\n              yPos: skull.yPos + skull.size / 2,\n              time: this.state.lastTickTime\n            };\n            delete this.skulls[skull.id];\n          }\n        });\n      }\n    }\n  }\n\n  titleScreenClickEvents() {\n    if (this.state.currentScreen === 'title') {\n      this.state.currentScreen = 'game';\n      this.components.fire.sfx.volume = 1;\n      this.components.fire.sfx.play();\n      toggleHeader();\n    }\n  }\n\n  addEventListeners() {\n    // Event for when tab loses focus\n    document.addEventListener('visibilitychange', () => {\n      this.state.isGameTabHidden = document.hidden;\n      if (\n        this.state.currentScreen === 'game' &&\n        this.state.life > 0 &&\n        !this.state.isPaused\n      ) {\n        this.state.isPaused = true;\n        this.state.pauseTimestamp = this.state.lastTickTime;\n        this.components.fire.sfx.pause();\n        const gameControlsEl = document.getElementById('game-controls');\n        gameControlsEl.classList.toggle('play-control--paused');\n        toggleCanvasOverlay();\n      }\n      if (this.state.life === 0) {\n        this.state.isGameTabHidden\n          ? this.components.fire.sfx.pause()\n          : this.components.fire.sfx.play();\n      }\n    });\n\n    // Click event for the speed slider control\n    const speedSliderBarEl = document.getElementById(\n      'game-speed-control-slider'\n    );\n    speedSliderBarEl.addEventListener('input', evt => {\n      this.state.skullFallSpeed = speedSliderBarEl.value;\n    });\n\n    // Click event for the pause/resume button\n    const gameControlsEl = document.getElementById('game-controls');\n    gameControlsEl.addEventListener('click', () => {\n      if (this.state.life > 0) {\n        gameControlsEl.classList.toggle('play-control--paused');\n        this.state.isPaused = !this.state.isPaused;\n        toggleCanvasOverlay();\n        if (this.state.isPaused) {\n          this.state.pauseTimestamp = this.state.lastTickTime;\n          this.components.fire.sfx.pause();\n        } else {\n          this.components.fire.sfx.play();\n        }\n      }\n    });\n\n    this.canvas.addEventListener('click', evt => {\n      this.titleScreenClickEvents();\n      this.gameClickEvents(getClickPoint(evt));\n    });\n\n    this.canvas.addEventListener('touchstart', evt => {\n      this.titleScreenClickEvents();\n      this.gameClickEvents(getClickPoint(evt));\n    });\n  }\n\n  createSkull() {\n    const newSkull = new Skull(\n      this.canvas.width,\n      this.config.headerHeight,\n      this.state.lastTickTime\n    );\n    this.skulls[newSkull.id] = newSkull;\n  }\n\n  addSkulls() {\n    // Add a new skull every second\n    if (this.state.lastTickTime - this.state.lastSkullCreateTime >= 1000) {\n      const skulls = Object.values(this.skulls);\n      if (skulls.length === 0) {\n        this.createSkull();\n      } else {\n        const lastSkull = skulls[skulls.length - 1];\n        // Avoid adding skulls on top of each other.\n        if (lastSkull && lastSkull.yPos >= lastSkull.size) {\n          this.createSkull();\n        }\n      }\n      this.state.lastSkullCreateTime = this.state.lastTickTime;\n    }\n  }\n\n  updateSkulls() {\n    Object.values(this.skulls).forEach(skull => {\n      skull.move(\n        this.state.skullFallSpeed,\n        this.state.lastTickTime,\n        this.state.isPaused,\n        this.state.pauseTimestamp\n      );\n      // Remove if out of bounds\n      if (skull.yPos >= this.canvas.height + skull.size) {\n        skull.sfx.burn.play();\n        delete this.skulls[skull.id];\n        this.state.life -= 1;\n        updateLife(this.state.life);\n        if (!this.state.life) {\n          this.state.gameOverTime = this.state.lastTickTime;\n        }\n      }\n    });\n  }\n\n  drawScores() {\n    Object.values(this.displayScores).forEach(score => {\n      if (this.state.lastTickTime - score.time <= 500) {\n        this.ctx.textAlign = 'start';\n        this.ctx.font = `20px ${config.font}`;\n        this.ctx.fillStyle = config.scoreColor;\n        this.ctx.fillText(`+${score.pointValue}`, score.xPos, score.yPos);\n      } else {\n        delete this.displayScores[score.id];\n      }\n    });\n  }\n\n  runGame() {\n    if (this.state.isPaused) {\n      this.components.fire.sfx.pause();\n    }\n    // Draw components and skulls\n    this.components.fire.draw(\n      this.ctx,\n      this.canvas.width,\n      this.canvas.height,\n      this.state.isPaused\n    );\n    Object.values(this.skulls).forEach(skull => {\n      skull.draw(this.ctx);\n    });\n    if (this.state.life === 0) {\n      this.gameOver();\n    }\n    this.drawScores();\n  }\n\n  gameOver() {\n    this.ctx.textAlign = 'center';\n    const fontHeight = this.config.isSmallScreen ? 50 : 80;\n    this.ctx.font = `${fontHeight}px ${config.titleFont}`;\n    this.ctx.fillStyle = '#bb0a1e';\n    this.ctx.fillText(\n      'GAME OVER',\n      this.canvas.width / 2,\n      this.canvas.height / 2 - fontHeight\n    );\n    if (this.state.isGameTabHidden) {\n      this.state.gameOverTime +=\n        this.state.lastTickTime - this.state.gameOverTime;\n    }\n    if (this.state.lastTickTime - this.state.gameOverTime >= 5000) {\n      // Reset game state\n      this.state.skullFallSpeed = 10;\n      this.skulls = {};\n      this.state.life = 10;\n      updateLife(this.state.life);\n      this.state.score = 0;\n      updateScore(0);\n      this.state.isPaused = false;\n      // Reset the speed slider\n      const speedSliderBarEl = document.getElementById(\n        'game-speed-control-slider'\n      );\n      speedSliderBarEl.value = 10;\n      // Mute the fire sfx\n      this.components.fire.sfx.volume = 0;\n      // Remove the header\n      toggleHeader();\n      // Go back to title screen\n      this.state.currentScreen = 'title';\n    }\n  }\n\n  update() {\n    if (this.state.currentScreen === 'game' && this.state.life > 0) {\n      this.updateSkulls();\n      if (!this.state.isPaused) {\n        this.addSkulls();\n      }\n    }\n  }\n\n  render() {\n    // Clear the canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    switch (this.state.currentScreen) {\n      case 'game': {\n        this.runGame();\n        break;\n      }\n      default: {\n        this.screens.titleScreen.load(this.ctx, this.config.isSmallScreen);\n      }\n    }\n  }\n\n  run(dTime) {\n    this.state.lastTickTime = dTime;\n    window.requestAnimationFrame(dTime => this.run(dTime));\n    this.update();\n    this.render();\n  }\n}\n","import Game from './game.js';\nimport '../styles/main.scss';\n\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Kick off main game loop\n  const firstGameTime = window.performance.now();\n  game.state.lastSkullCreateTime = firstGameTime;\n  game.run(firstGameTime);\n});\n","module.exports = __webpack_public_path__ + \"27662ad207610e3ed76bce537618eabd.svg\";","module.exports = __webpack_public_path__ + \"27126068ad3068d268ece96cf35fada4.wav\";"],"sourceRoot":""}